<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>产品经理扫盲</title>
      <link href="/2020/04/19/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%89%AB%E7%9B%B2/"/>
      <url>/2020/04/19/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="产品经理扫盲"><a href="#产品经理扫盲" class="headerlink" title="产品经理扫盲"></a>产品经理扫盲</h1><p>对这个岗位有点兴趣，了解一下。<br>以下内容整理自视频：<a href="https://www.bilibili.com/video/BV1EE411E7Vz/" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1EE411E7Vz/</a></p><h2 id="产品经理-产品运营-市场营销"><a href="#产品经理-产品运营-市场营销" class="headerlink" title="产品经理 产品运营 市场营销"></a>产品经理 产品运营 市场营销</h2><p><strong>产品经理：</strong>创造一个商业模式下所对应的在线解决方案（网站/app/小程序）<br><strong>产品运营：</strong>把产品推向用户和市场，产生利润。<br><strong>市场营销：</strong>当老板发现了一个用户新需求后，会产品经理和研发来创造产品。然后把产品交付给运营团队进行上架、发布、传播和售卖，以及口碑维护。这整个过程就是市场营销。<br><img src="%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80.jpg" alt="市场营销" title="市场营销"></p><p>可参考：<br><a href="https://www.zhihu.com/question/33636751/answer/390510358" target="_blank" rel="noopener">https://www.zhihu.com/question/33636751/answer/390510358</a><br><a href="https://zhuanlan.zhihu.com/p/29557734" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29557734</a></p><h2 id="商业模式的例子"><a href="#商业模式的例子" class="headerlink" title="商业模式的例子"></a>商业模式的例子</h2><ol><li>聚拢大量客户，打广告<br> 短视频</li><li>在线卖货产生利润<br> 电商</li><li>向用户收取服务费<br> 各种会员</li><li>在线撮合买卖双方形成交易，收取中介费<br> 二手车交易，二手房交易</li></ol><h2 id="产品分析"><a href="#产品分析" class="headerlink" title="产品分析"></a>产品分析</h2><p>本质：商业模式的对比分析<br>思路：</p><ol><li>对产品的喜好，原因<br>例如：我不爱用抖音，爸妈爱用，为什么？</li><li>假如负责某个产品，如何优化？<br> 某产品上线新功能，倒推原因，目的，你看好与否，期待它会变成什么样？</li><li>一个产品如何从无到有，为何发展快速<br> b站兴起，或者一些别的产品为何衰落</li></ol><p>产品调研框架：<br><img src="%E8%B0%83%E7%A0%94%E6%A1%86%E6%9E%B6.png" alt="调研框架" title="调研框架"></p><h3 id="一个小案例思路"><a href="#一个小案例思路" class="headerlink" title="一个小案例思路"></a>一个小案例思路</h3><p>App在满足用户没有说出口的需求上做出的努力。</p><ol><li>从用户的角度出发</li><li>观察和归纳用户的行为</li><li>做出一些合理的揣测</li><li>极小成本的实现<br>这样可以很好的实现了产品目标和用户需求的平衡，提升用户的体验。</li></ol><p>例如：</p><ol><li>微博快捷评论功能：在「关注」的信息流页面，如果你在当前微博停顿超过5s，就会弹出快捷评论的入口。</li><li>绿洲的WOW功能：点击WOW的按钮，随机生成一句话，作为评论。可以减少用户的操作成本，也可以激励内容生产者。</li><li>截图，出现反馈入口或者分享入口：<ul><li>支付宝，截图之后，会弹出一个特别小的浮层「help」，点击后跳转help页面，可以进行问题求助和意见反馈。</li><li>唯品会生成商品图片，引导分享微信好友和朋友圈；</li><li>豆瓣会生成社交内容的长图片，可以下载和分享。</li><li>输入法的自动联想输入一个词语之后，会有推荐的备选词。</li></ul></li></ol><h2 id="互联网变现的几种主流形式"><a href="#互联网变现的几种主流形式" class="headerlink" title="互联网变现的几种主流形式"></a>互联网变现的几种主流形式</h2><p>广告<br>游戏<br>资讯<br>会员<br>商城</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ol><li><p>带纸笔，纸质简历</p></li><li><p>回答套路</p><ul><li>个人亮点<br><img src="%E4%B8%AA%E4%BA%BA%E4%BA%AE%E7%82%B9.png" alt="个人亮点" title="个人亮点"></li><li>个人经历<br><img src="%E5%BE%AE%E4%BF%A1%E7%A4%BE%E7%BE%A4.png" alt="微信社群1" title="微信社群1"><br><img src="%E5%BE%AE%E4%BF%A1%E7%A4%BE%E7%BE%A42.png" alt="微信社群2" title="微信社群2"></li><li>倒背如流</li><li>深入思考：背景，目的，效果，决策原因，未来展望</li><li>横向对比：商业模式，如何竞争</li><li>未来展望</li></ul></li><li><p>一些回答案例<br><img src="%E8%81%8C%E4%BD%8D%E6%80%9D%E8%80%83.png" alt="职位思考" title="职位思考"><br><img src="%E5%BC%80%E6%94%BE%E5%BC%8F%E9%97%AE%E9%A2%981.png" alt="开放式问题1" title="开放式问题1"><br><img src="%E5%BC%80%E6%94%BE%E5%BC%8F%E9%97%AE%E9%A2%982.png" alt="开放式问题2" title="开放式问题2"></p></li></ol><h3 id="避雷"><a href="#避雷" class="headerlink" title="避雷"></a>避雷</h3><ol><li>不结构化回答问题，陷入细节<br> 结构化：先列要点，再对重要的点展开<br> <img src="%E7%BB%93%E6%9E%84%E5%8C%96%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98.png" alt="结构化回答问题" title="结构化回答问题"></li><li>不确定意图却急着回答<br> 不清楚就问清楚</li><li>不深入思考就快速回答<br> “请给我一到两分钟的思考时间可以吗”<br> 用纸笔写出思路</li><li>不会答的强行答</li><li>不换位思考，使用专业名词回答问题<br> 用接地气的话讲</li><li>对工作意愿不强</li><li>喊着要学习<br> “对于这个领域我的确之前没有特别深入的了解，那么接下来我愿意通过学习来提高我对于这个领域的认知，我觉得我可以做到的”</li><li>对面试官提问<br> 对业务面试官：<br> <img src="%E4%B8%9A%E5%8A%A1%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%E9%A2%98.png" alt="业务面试官问题" title="业务面试官问题"><br> 对HR：<br> <img src="HR%E9%97%AE%E9%A2%98.png" alt="HR问题" title="HR问题"></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack笔记</title>
      <link href="/2020/04/09/webpack%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/09/webpack%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack笔记"><a href="#webpack笔记" class="headerlink" title="webpack笔记"></a>webpack笔记</h1><h2 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h2><p>Webpack 可以做什么事情？</p><ol><li>webpack 能够处理 JS 文件的互相依赖关系；</li><li>webpack 能够处理JS的兼容问题，把 高级的、浏览器不是别的语法，转为 低级的，浏览器能正常识别的语法</li></ol><h2 id="打包遇到的坑"><a href="#打包遇到的坑" class="headerlink" title="打包遇到的坑"></a>打包遇到的坑</h2><ul><li>打包方法：<code>webpack  要打包的文件的路径  打包好的输出文件的路径</code></li></ul><h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><ul><li>已全局安装webpack：<code>npm i webpack -g</code><br>执行<code>webpack .\src\main.js -o .\dist\bundle.js</code>,加<code>-o</code>是4以上版本的语法</li></ul><p><strong>报错</strong></p><pre><code>webpack : 无法加载文件 C:\Users\Kaious\AppData\Roaming\npm\webpack.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</code></pre><p><strong>解决方法</strong><br>参考：<a href="http://www.bubuko.com/infodetail-3481466.html" target="_blank" rel="noopener">解决方法</a></p><ol><li>使用管理员身份打开PowerShell</li><li>键入Set-ExecutionPolicy RemoteSigned命令</li><li>键入Y</li><li>最后可以使用Get-ExecutionPolicy来看看是否修改成功</li></ol><h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><ul><li>再次执行<code>webpack .\src\main.js -o .\dist\bundle.js</code></li></ul><p><strong>报错</strong></p><pre><code>webpack not installedInstall webpack to start bundling:  $ npm install --save-dev webpack</code></pre><p>按照指示<code>npm install --save-dev webpack</code>还是不行<br><strong>解决方法</strong></p><ul><li>需要全局安装webpack-cli：<code>npm install webpack-cli -g</code></li></ul><h3 id="坑3"><a href="#坑3" class="headerlink" title="坑3"></a>坑3</h3><ul><li>再次执行<code>webpack .\src\main.js -o .\dist\bundle.js</code></li></ul><p><strong>警告</strong></p><pre><code>WARNING in configurationThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</code></pre><p><strong>解决方法</strong></p><ul><li>执行<code>webpack .\src\main.js -o .\dist\bundle.js --mode=development</code></li></ul><p><strong>大功告成！</strong></p><pre><code>Hash: 66bd1d851b4e3101e4b1Version: webpack 4.42.1Time: 252msBuilt at: 2020-04-09 0:05:01    Asset     Size  Chunks             Chunk Namesbundle.js  316 KiB    main  [emitted]  mainEntrypoint main = bundle.js[./src/main.js] 1.53 KiB {main} [built]    + 1 hidden module</code></pre><h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol><li><p>在项目根目录中创建<code>webpack.config.js</code></p></li><li><p>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 导入处理路径的模块</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/js/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目入口文件</span>     output<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置输出选项</span>         path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置输出的路径</span>         filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span> <span class="token comment" spellcheck="true">// 配置输出的文件名</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><p>当我们在 控制台，直接输入 <code>webpack</code>命令执行的时候，<code>webpack</code> 做了以下几步：</p><ol><li>首先，<code>webpack</code> 发现，我们并没有通过命令的形式，给它指定入口和出口</li><li><code>webpack</code> 就会去 项目的 根目录中，查找一个叫做 <code>webpack.config.js</code> 的配置文件</li><li>当找到配置文件后，<code>webpack</code> 会去解析执行这个 配置文件，当解析执行完配置文件后，就得到了 配置文件中，导出的配置对象<code>module</code></li><li>当 <code>webpack</code> 拿到 配置对象<code>module</code>后，就拿到了 配置对象中，指定的 入口  和 出口，然后进行打包构建；</li></ol><h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><p>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦。所以使用<code>webpack-dev-server</code>来实现代码<strong><em>实时打包编译</em></strong>，当修改代码之后，会自动进行打包构建</p><ol><li>项目根目录下运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，<br>在项目中本地安装的<code>webpack-dev-server</code>，无法把它当作脚本命令在powershell终端直接运行（只有全局-g的工具才能在终端正常执行）<br>此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>"dev": "webpack-dev-server"</code>指令，发现可以进行实时打包，</li></ol><p>运行<code>$npm run dev</code><br>输出信息：</p><pre><code>webpack-dev-serverProject is running at http://localhost:8080/webpack output is served from /Hash: a399444d432f5f8fa762Version: webpack 3.12.0Time: 493ms    Asset    Size  Chunks                    Chunk Namesbundle.js  613 kB       0  [emitted]  [big]  main   [2] multi ./node_modules/_webpack-dev-server@2.11.5@webpack-dev-server/client?http://localhost:8080 ./src/main.js 40 bytes {0} [built]   [3] ./node_modules/_webpack-dev-server@2.11.5@webpack-dev-server/client?http://localhost:8080 7.93 kB {0} [built]   [4] ./node_modules/url/url.js 23.3 kB {0} [built]   [5] ./node_modules/node-libs-browser/node_modules/punycode/punycode.js 14.7 kB {0} [built]   [7] ./node_modules/url/util.js 314 bytes {0} [built]   [8] ./node_modules/querystring-es3/index.js 127 bytes {0} [built]  [11] ./node_modules/_strip-ansi@3.0.1@strip-ansi/index.js 161 bytes {0} [built]  [12] ./node_modules/_ansi-regex@2.1.1@ansi-regex/index.js 135 bytes {0} [built]  [13] ./node_modules/_loglevel@1.6.7@loglevel/lib/loglevel.js 8.61 kB {0} [built]  [14] ./node_modules/_webpack-dev-server@2.11.5@webpack-dev-server/client/socket.js 1.08 kB {0} [built]  [16] ./node_modules/_webpack-dev-server@2.11.5@webpack-dev-server/client/overlay.js 3.67 kB {0} [built]  [21] (webpack)/hot nonrecursive ^\.\/log$ 170 bytes {0} [built]  [23] (webpack)/hot/emitter.js 77 bytes {0} [built]  [25] ./src/main.js 1.57 kB {0} [built]  [26] ./node_modules/jquery/dist/jquery.js 280 kB {0} [built]    + 12 hidden moduleswebpack: Compiled successfully.</code></pre><h3 id="bundle-js放在内存中"><a href="#bundle-js放在内存中" class="headerlink" title="bundle.js放在内存中"></a><code>bundle.js</code>放在内存中</h3><p>但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中,以一种虚拟的形式托管到根目录（看不到），和<code>src</code>，<code>dist</code>平级</p><ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到<code>src</code>目录下，才能打开我们的<code>index</code>首页，此时引用不到<code>bundle.js</code>文件，需要修改<code>index.html</code>中<code>script</code>的<code>src</code>属性为:<code>&lt;script src="../bundle.js"&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：</li></ul><h3 id="在package-json文件配置启动页面"><a href="#在package-json文件配置启动页面" class="headerlink" title="在package.json文件配置启动页面"></a>在<code>package.json</code>文件配置启动页面</h3><p><code>package.json</code>文件中，在<code>scripts</code>节点下<code>"dev"</code>改为<br> <code>"dev": "webpack-dev-server --open --port 3000 --contentBase src --hot"</code></p><ul><li><code>--open</code> 自动打开浏览器</li><li><code>--port 3000</code> 端口号为3000</li><li><code>--contentBase src</code> 自动显示scr目录下内容</li><li><code>--hot</code>可以实现异步刷新，例如改变css元素不会刷新页面<br>同时修改index页面中script的src属性为<code>&lt;script src="bundle.js"&gt;&lt;/script&gt;</code></li></ul><h3 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h3><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改<code>index.html</code>中<code>script</code>标签的<code>src</code>属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li><p>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</p></li><li><p>修改<code>webpack.config.js</code>配置文件如下：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 导入处理路径的模块</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 导入自动生成HTMl文件的插件</span> <span class="token keyword">var</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/js/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目入口文件</span>     output<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 配置输出选项</span>         path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置输出的路径</span>         filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span> <span class="token comment" spellcheck="true">// 配置输出的文件名</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 添加plugins节点配置插件</span>         <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             template<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//模板路径</span>             filename<span class="token punctuation">:</span><span class="token string">'index.html'</span><span class="token comment" spellcheck="true">//自动生成的HTML文件的名称</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre></li></ol><h4 id="htmlWebpackPlugin插件的两个作用："><a href="#htmlWebpackPlugin插件的两个作用：" class="headerlink" title="htmlWebpackPlugin插件的两个作用："></a><code>htmlWebpackPlugin</code>插件的两个作用：</h4><ol><li>自动在<strong><code>内存中</code></strong>根据指定页面生成一个内存的页面</li><li>自动把打包好的 <code>bundle.js</code> 追加到页面中去,当使用<code>html-webpack-plugin</code>之后，我们不再需要手动处理<code>bundle.js</code>的引用路径了，因为这个插件，已经帮我们自动创建了一个合适的<code>script</code> , 并且引用了正确的路径</li></ol><h4 id="配置启动页面步骤（启动hot更新）"><a href="#配置启动页面步骤（启动hot更新）" class="headerlink" title="配置启动页面步骤（启动hot更新）"></a>配置启动页面步骤（启动hot更新）</h4><ol><li>修改<code>webpack.config.js</code>文件，<code>module</code>中新增<code>devServer</code>节点如下：<pre class=" language-javascript"><code class="language-javascript">devServer<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//  --open --port 3000 --contentBase src --hot</span> open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动打开浏览器</span> port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置启动时候的运行端口</span> contentBase<span class="token punctuation">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定托管的根目录</span> hot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 启用热更新 的 第1步</span> <span class="token punctuation">}</span></code></pre></li><li>在头部引入<code>webpack</code>模块：<pre><code>var webpack = require('webpack');</code></pre></li><li>在<code>plugins</code>节点下新增：<pre><code>new webpack.HotModuleReplacementPlugin()</code></pre></li></ol><h2 id="webpack处理第三方文件类型"><a href="#webpack处理第三方文件类型" class="headerlink" title="webpack处理第三方文件类型"></a>webpack处理第三方文件类型</h2><ol><li>发现要处理的文件不是<code>js</code>文件，去配置文件中查找有没有对应的第三方<code>loader</code>规则</li><li>如果找到对应规则，调用对应<code>loader</code>处理文件</li><li><code>loader</code>模块的调用顺序是<strong><code>从后向前</code></strong>调用的</li><li>最后一个<code>loader</code>调用完毕，把处理的结果直接交给<code>webpack</code>打包合并，最终输出到<code>bundle.js</code></li></ol><h3 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h3><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<ul><li>在<code>module.exports = {}</code>里新增一个 配置节点，叫做 <code>module</code>, 它是一个对象</li><li>在这个 <code>module</code> 对象身上，有个 <code>rules</code> 属性，是个数组；</li><li>这个数组中，存放了所有第三方文件的匹配和处理规则；<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 用来配置第三方loader模块的</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 文件的匹配规则</span>      <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//处理css文件的规则</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>注意：<ul><li><code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；</li><li><code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li></ul></li></ol><h3 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h3><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ol><h3 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h3><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<pre><code>{ test: /\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }</code></pre></li></ol><h3 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h3><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<pre><code>{ test: /\.(png|jpg|gif)$/, use: 'url-loader' }</code></pre></li><li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：</li></ol><p><code>name=[hash:8]-[name].[ext]</code><br>    - <code>[hash:8]-</code>每张图片前面放个8位hash值，防止图片重名显示重复<br>    - <code>[name].[ext]</code>表示用图片本身的<code>名称</code>和<code>后缀名</code></p><pre><code>{  test: /\.(jpg|png|gif|bmp|jpeg)$/, use: 'url-loader?limit=7631&amp;name=[hash:8]-[name].[ext]'  },</code></pre><h2 id="Babel将高级的语法转换为低级的语法"><a href="#Babel将高级的语法转换为低级的语法" class="headerlink" title="Babel将高级的语法转换为低级的语法"></a>Babel将高级的语法转换为低级的语法</h2><p>在 webpack 中，默认只能处理 一部分 <code>ES6</code> 的新语法，一些<code>更高级的ES6语法或者 ES7 语法</code>，webpack 是处理不了的；<br>这时候，就需要 借助于第三方的 <code>loader</code>，来帮助webpack 处理这些高级的语法，<br>当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中</p><p>通过 <code>Babel</code> ，可以帮我们将 高级的语法转换为 低级的语法</p><ol><li><p>在 webpack 中，可以运行如下两套 命令，安装两套包，去安装 <code>Babel</code> 相关的<code>loader</code>功能：<br> 1.1 第一套包： <code>cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</code><br> 1.2 第二套包： <code>cnpm i babel-preset-env babel-preset-stage-0 -D</code></p></li><li><p>打开 <code>webpack</code> 的配置文件，在 <code>module</code> 节点下的 <code>rules</code> 数组中，添加一个 新的 匹配规则：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">{</span> test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span> <span class="token punctuation">}</span></code></pre><p>注意： 在配置 <code>babel</code> 的 <code>loader</code>规则的时候，必须 把 <code>node_modules</code> 目录，通过 <code>exclude</code> 选项排除掉：原因有俩：</p></li></ol><ul><li>如果 不排除 <code>node_modules</code>， 则<code>Babel</code> 会把 <code>node_modules</code> 中所有的 第三方 <code>JS</code> 文件，都打包编译，这样，会非常消耗CPU，</li><li>同时，打包速度非常慢；哪怕，最终，<code>Babel</code> 把 所有 <code>node_modules</code> 中的<code>JS</code>转换完毕了，但是，项目也无法正常运行！</li></ul><ol start="3"><li>在项目的 根目录中，新建一个 叫做 <code>.babelrc</code>  的<code>Babel</code> 配置文件，这个配置文件，属于<code>JSON</code>格式，所以，在写 <code>.babelrc</code> 配置的时候，必须符合<code>JSON</code>语法规范： <code>不能写注释，字符串必须用双引号</code><br> 3.1 在 .babelrc 写如下的配置：  大家可以把 preset 翻译成 【语法】 的意思</li></ol><pre class=" language-json"><code class="language-json">         <span class="token punctuation">{</span>           <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token string">"stage-0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span></code></pre><ol start="4"><li>了解： 目前，我们安装的 babel-preset-env, 是比较新的ES语法， 之前， 我们安装的是 babel-preset-es2015, 现在，出了一个更新的 语法插件，叫做 babel-preset-env ，它包含了 所有的 和 es***相关的语法</li></ol><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><pre><code>Module build failed (from ./node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js):Error: Cannot find module '@babel/core'</code></pre><p>官方默认<code>babel-loader | babel</code>对应的版本需要一致: 即最新<code>babel-loader</code>需要搭配最新版本<code>babel</code><br>解决方法：回退低版本(或者均更新到最高版本)</p><pre><code>npm install -D babel-loader@7 babel-core babel-preset-env</code></pre><h2 id="webpack-中如何使用-vue"><a href="#webpack-中如何使用-vue" class="headerlink" title="webpack 中如何使用 vue"></a>webpack 中如何使用 vue</h2><ol><li>安装vue的包：<code>cnpm i vue -S</code></li><li>由于 在 <code>webpack</code> 中，推荐使用 <code>.vue</code> 这个组件模板文件定义组件，所以，需要安装能解析这种文件的 <code>loader</code>:<code>cnpm i vue-loader vue-template-complier -D</code><ul><li>在<code>webpack.config</code>配置<code>loader</code><ul><li><code>const VueLoaderPlugin = require('_vue-loader@15.9.1@vue-loader/lib/plugin')</code></li><li>在<code>plugin[]</code>中<code>new VueLoaderPlugin()</code></li></ul></li></ul></li><li>在 <code>main.js</code> 中，导入 <code>vue</code> 模块  <code>import Vue from 'vue'</code></li><li>定义一个 <code>.vue</code> 结尾的组件，其中，组件有三部分组成： <code>template script style</code></li><li>使用 <code>import login from './login.vue'</code> 导入这个组件</li><li>创建 vm 的实例 <code>var vm = new Vue({ el: '#app', render: c =&gt; c(login) })</code></li><li>在页面中创建一个 <code>id</code> 为 <code>app</code> 的 <code>div</code> 元素，作为我们 vm 实例要控制的区域；</li></ol><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><h3 id="一句话tips"><a href="#一句话tips" class="headerlink" title="一句话tips"></a>一句话tips</h3><ul><li>webpack里面带<code>s</code>的都是数组，例如<code>plugins</code></li><li><code>import *** from ***</code> 是ES6中导入模块的方式</li><li><code>import './css/index.css'</code> 一般js才会<code>import *** from ***</code>，css直接<code>import</code></li><li><code>JSON</code>里面不能写注释</li><li>万能解决：把<code>node_modules</code>删了，然后<code>npm i</code>重装所有的包</li></ul><h3 id="npm常用指令"><a href="#npm常用指令" class="headerlink" title="npm常用指令"></a>npm常用指令</h3><p><a href="https://blog.csdn.net/jwl_willon/article/details/81054978" target="_blank" rel="noopener">参考1</a>   <a href="https://www.cnblogs.com/yuesu/p/10980848.html">参考2</a></p><ol><li><p><code>npm install</code> &lt;=&gt; <code>npm i</code><br><code>--save</code>   &lt;=&gt; <code>-S</code><br><code>--save-dev</code>  &lt;=&gt; <code>-D</code><br><code>npm run start</code> &lt;=&gt; <code>npm start</code>  // 对应”scripts”里的”start”命令</p></li><li><p><code>npm i &lt;packname&gt;</code> </p><ul><li>安装模块到项目<code>node_modules</code>目录下</li><li>不会修改<code>package.json</code>文件</li><li>运行 <code>npm install</code> 初始化项目时不会下载模块</li></ul></li><li><p><code>npm i --save-dev  &lt;packname&gt;</code>  </p><ul><li>安装模块到项目<code>node_modules</code>目录下</li><li>并在<code>package</code>文件的<code>devDependencies</code>属性写入依赖</li><li>运行 <code>npm install</code> 初始化项目时，会将模块下载到项目目录下</li><li>运行<code>npm install --production</code>或者注明<code>NODE_ENV</code>变量值为<code>production</code>时，不会自动下载模块到<code>node_modules</code>目录中</li><li>工程构建（开发时、“打包”时）依赖 ；例：xxx-cli , less-loader , babel-loader…</li></ul></li><li><p><code>npm i --save &lt;packname&gt;</code> </p><ul><li>安装模块到项目<code>node_modules</code>目录下</li><li>并在<code>package</code>文件的<code>dependencies</code>属性写入依赖</li><li>运行 <code>npm install</code> 初始化项目时，会将模块下载到项目目录下</li><li>运行<code>npm install --production</code>或者注明<code>NODE_ENV</code>变量值为<code>production</code>时，会自动下载模块到<code>node_modules</code>目录中</li><li>项目（运行时、发布到生产环境时）依赖；例：antd , element,react…</li></ul></li><li><p><code>npm i &lt;packname&gt; -g</code> </p><ul><li>-g 将模块安装到全局，具体安装到磁盘哪个位置，要看npm config prefix的位置。<br>查看：<code>npm config ls</code><br>修改：<code>npm config set prefix</code></li><li>不会在项目node_modules目录中保存模块包</li><li>不会修改package.json文件</li><li>运行 npm install 初始化项目时不会下载模块</li></ul></li><li><p>对应关系<br><img src="npm.png" alt="对应关系" title="关系"><br><img src="node_env.png" alt="`package.json=>script`命令中设置`NODE_ENV`" title="NODE_ENV"><br>使用原则:运行时需要用到的包使用<code>--save</code>，否则使用<code>--save-dev</code>。</p></li></ol><ol start="7"><li>在新建<code>package.json</code>文件时，我们可以使用<code>npm init -y</code> 快速创建（yes 表示一路默认创建，还有 -f 表示 force）</li></ol><h3 id="path-resolve和path-join"><a href="#path-resolve和path-join" class="headerlink" title="path.resolve和path.join"></a><code>path.resolve</code>和<code>path.join</code></h3><h4 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a><code>path.resolve</code></h4><p>参考：<a href="https://blog.csdn.net/iconhot/article/details/89257576" target="_blank" rel="noopener">https://blog.csdn.net/iconhot/article/details/89257576</a></p><ul><li><p>作用：<code>path.resolve()</code> 该方法将一些的 路径/路径段 解析为<code>绝对路径</code>。</p></li><li><p>语法：<code>path.resolve( [from…],to )</code></p></li><li><p>说明：将参数<code>to</code>位置的字符解析到一个绝对路径里，<code>[from … ]</code>为选填项，路径源</p></li><li><p>总结：</p><ul><li>从后向前</li><li>若字符以<code>/</code>开头，不会拼接到前面的路径；</li><li>若以 <code>…/</code>开头，拼接前面的路径，且不含最后一节路径；</li><li>若连续出现多个<code>…/…/…</code>或者<code>…/…</code>则忽略前方<code>…</code>个路径名进行拼接；</li><li>若以<code>./</code> 开头 或者<code>没有符号</code> 则拼接前面路径；</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//引入node的path模块</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'./baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'/baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'./foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/home/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/home/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">,</span><span class="token string">'aadada'</span><span class="token punctuation">,</span><span class="token string">'../../..'</span><span class="token punctuation">,</span> <span class="token string">'asset'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//return '/home/foo/asset'</span></code></pre><h4 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a><code>path.join</code></h4><p>参考：<a href="https://www.cnblogs.com/yangjie-space/p/10569982.html" target="_blank" rel="noopener">https://www.cnblogs.com/yangjie-space/p/10569982.html</a></p><ul><li><p>作用：<code>path.join()</code>方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</p></li><li><p>语法：<code>path.resolve([...paths])</code></p></li><li><p>说明：</p><ul><li>长度为零的 path 片段会被忽略。 </li><li>如果连接后的路径字符串是一个长度为零的字符串，则返回 <code>.</code>，表示当前工作目录</li></ul></li><li><p>和<code>path.resolve</code>的区别</p><ul><li><code>join()</code>只是拼接各个<code>path</code>片段，并不像<code>resolve()</code>一样除了拼接各个字段还拼接了工作目录的路径</li><li>如果以<code>/</code>开头的字符串片段在<code>join</code>并不像<code>resolve</code>一样是只返回自身</li><li>还有就是<code>..</code> 同 <code>../</code>是一个意思，都代表上一级</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/img'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">,</span> <span class="token string">'net/abc'</span><span class="token punctuation">,</span> <span class="token string">'inter'</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns /img/book/net/abc</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/img/books'</span><span class="token punctuation">,</span> <span class="token string">'../net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns /img/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'img/books'</span><span class="token punctuation">,</span> <span class="token string">'../net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns img/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/img/books'</span><span class="token punctuation">,</span> <span class="token string">'./net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns /img/books/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'img/books'</span><span class="token punctuation">,</span> <span class="token string">'./net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns img/books/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/img/books'</span><span class="token punctuation">,</span> <span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns /img/books/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'img/books'</span><span class="token punctuation">,</span> <span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns /img/books/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/img/books'</span><span class="token punctuation">,</span> <span class="token string">'/net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns /img/books/net</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'img/books'</span><span class="token punctuation">,</span> <span class="token string">'/net'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns img/books/net</span></code></pre><h3 id="静态属性和实例属性"><a href="#静态属性和实例属性" class="headerlink" title="静态属性和实例属性"></a>静态属性和实例属性</h3><ul><li>静态属性：可以直接通过类名，直接访问的属性</li><li>实例属性：只能通过类的实例，来访问的属性</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token operator">=</span> name <span class="token punctuation">}</span> Animal<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token number">123</span> <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'小花'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这是静态属性：</span> <span class="token comment" spellcheck="true">// console.log(Animal.info)</span> <span class="token comment" spellcheck="true">// 这是实例属性：</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p>静态属性是直接挂载在对象<code>Animal</code>上的（函数就是一个对象）<br>实例属性是通过<code>new Animal</code>开辟出一块新的内存，挂载在新内存上</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记05</title>
      <link href="/2020/04/08/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B005/"/>
      <url>/2020/04/08/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B005/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔记05"><a href="#前端笔记05" class="headerlink" title="前端笔记05"></a>前端笔记05</h1><h2 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h2><p>可参考<a href="https://www.jianshu.com/p/8d9bcb9079c9" target="_blank" rel="noopener">vue中使用localStorage存储信息</a></p><p>对浏览器来说，使用Web Storage存储键值对比存储Cookie方式更直观，而且容量更大，它包含两种：</p><ul><li><strong>loalStorage（长期储存）：</strong><ul><li>生存期：与sessionStorage一样，但是浏览器关闭后，数据依然会一直存在</li><li>作用域：只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据</li></ul></li><li><strong>sessionStorage（临时存储）：</strong><ul><li>生存期：为每一个数据源维持一个存储区域，在浏览器打开期间存在，包括页面重新加载（标签页关闭后就消失了）</li><li>作用域：除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下</li></ul></li></ul><p><img src="storage.png" alt="作用域" title="作用域"></p><h2 id="VUE使用-this-refs-来获取元素和组件"><a href="#VUE使用-this-refs-来获取元素和组件" class="headerlink" title="VUE使用 this.$refs 来获取元素和组件"></a>VUE使用 <code>this.$refs</code> 来获取元素和组件</h2><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取元素内容<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getElement<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 使用 ref 获取元素 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myh1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个大大的H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 使用 ref 获取子组件 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-com</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-com</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h5>这是一个子组件&lt;/h5>'</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'子组件'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了子组件的方法'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 通过 this.$refs 来获取元素</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myh1<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 通过 this.$refs 来获取组件</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mycom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mycom<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="VUE路由"><a href="#VUE路由" class="headerlink" title="VUE路由"></a>VUE路由</h2><h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><ol><li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h3 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 <code>vue-router</code></h3><ol><li><p>导入 <code>vue-router</code> 组件类库：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1. 导入 vue-router 组件类库 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/vue-router-2.7.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 <code>router-link</code> 组件来导航</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 2. 使用 router-link 组件来导航 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p><code>router-link</code> 默认渲染为一个<code>&lt;a&gt;</code>标签,里面不用写<code>#</code></p></li><li><p>使用 <code>router-view</code> 组件来显示匹配到的组件</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre><p><code>&lt;router-view&gt;</code>是 <code>vue-router</code> 提供的元素，专门用来当作占位符的<br>路由规则匹配到的组件，就会展示到这个 <code>router-view</code> 中去</p></li><li><p>创建组件</p><pre><code> // 4.1 使用 Vue.extend 来创建登录组件 var login = Vue.extend({   template: '&lt;h1&gt;登录组件&lt;/h1&gt;' }); // 4.2 直接创建注册组件 var register ={   template: '&lt;h1&gt;注册组件&lt;/h1&gt;' };</code></pre></li><li><p>创建一个路由 <code>router</code> 实例，通过 <code>routers</code> 属性来定义路由匹配规则</p><pre class=" language-javasript"><code class="language-javasript">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则// 创建一个路由对象,导入 vue-router 包之后，在 window 全局对象中，就有了一个 路由的构造函数，叫做 VueRouter// 在 new 路由对象的时候，可以为 构造函数，传递一个配置对象 var router = new VueRouter({ // 这个配置对象中的 routes 表示 【路由匹配规则】 的意思   routes: [     // 每个路由规则都是一个对象，这个规则对象身上有两个必须的属性：     //  属性1 是 path， 表示监听哪个路由链接地址；     //  属性2 是 component， 表示如果路由是前面匹配到的 path ，则展示 component 属性对应的那个组件     // 注意： component 的属性值，必须是一个 组件的模板对象,不能是 组件的引用名称；     { path: '/login', component: login },     { path: '/register', component: register }   ] });</code></pre><p>注意： <code>component</code> 的属性值，必须是一个 组件的模板对象,不能是 组件的引用名称；</p></li><li><p>使用 <code>router</code> 属性来使用路由规则</p><pre><code>// 6. 创建 Vue 实例，得到 ViewModel var vm = new Vue({   el: '#app',   router: router // 使用 router 属性来使用路由规则 });</code></pre><p>将路由规则对象，注册到 <code>vm</code> 实例上，用来监听 <code>URL</code> 地址的变化，然后展示对应的组件</p></li></ol><h3 id="使用tag属性指定router-link渲染的标签类型"><a href="#使用tag属性指定router-link渲染的标签类型" class="headerlink" title="使用tag属性指定router-link渲染的标签类型"></a>使用<code>tag</code>属性指定<code>router-link</code>渲染的标签类型</h3><h3 id="设置路由重定向"><a href="#设置路由重定向" class="headerlink" title="设置路由重定向"></a>设置路由重定向</h3><h3 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h3><h3 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h3><h3 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h3><ol><li><p>在规则中定义参数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 方式1 需要修改path属性--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login/12/ls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 方式2 使用 查询字符串 --></span> <span class="token comment" spellcheck="true">&lt;!-- 如果使用查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register?id<span class="token punctuation">=</span>10&amp;name<span class="token punctuation">=</span>zs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token comment" spellcheck="true">// 方式1</span>     <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/login/:id/:name'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 方式2</span>     <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/register'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span>   <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>获取路由中的参数：    </p></li></ol><ul><li>方式1：通过 <code>this.$route.params</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// this可以省略</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>登录 --- {{this.$route.params.id}}&lt;/h1>'</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 组件的生命周期钩子函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>方式2：通过 <code>this.$route.query</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// this可以省略</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>注册 --- {{ $route.query.id }} --- {{ $route.query.name }}&lt;/h1>'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 组件的生命周期钩子函数</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h3><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tmpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是 Account 组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/account/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/account/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 组件的模板对象</span>    <span class="token keyword">var</span> account <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'#tmpl'</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>登录&lt;/h3>'</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>注册&lt;/h3>'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 路由实例</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/account/login'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用 redirect 实现路由重定向</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/account'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> account<span class="token punctuation">,</span>          children<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 通过 children 数组属性，来实现路由的嵌套</span>            <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 注意，子路由的开头位置，不要加 / 路径符</span>            <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'register'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        account      <span class="token punctuation">}</span><span class="token punctuation">,</span>      router<span class="token punctuation">:</span> router    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>使用 <code>redirect</code> 实现路由重定向，这里和nodejs中的<code>redirect</code>完全不是一回事，只用于客户端</li><li><code>children</code>写在父亲的路由匹配规则里</li><li><code>children:[{path:'path1',component:{cRouter1}},{path:'path2',component:{cRouter1}}]</code></li><li>注意，子路由的开头位置，不要加 <code>/</code> 路径符</li></ul><h3 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h3><ol><li>标签代码结构：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认显示的是header --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- name的内容是个字符串 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>JS代码：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 组件模板对象</span>    <span class="token keyword">var</span> header <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="header">header&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sidebar <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'sidebar'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="sidebar">sidebar&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> mainbox <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mainbox'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div class="mainbox">mainbox&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建路由对象</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// component的属性值必须是一个组件的模板对象，不能是组件的引用名称</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> header<span class="token punctuation">,</span>            a<span class="token punctuation">:</span> sidebar<span class="token punctuation">,</span>            b<span class="token punctuation">:</span> mainbox          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      router    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>CSS 样式：</li></ol><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span></span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.sidebar</span> </span><span class="token punctuation">{</span>      <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid green<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.mainbox</span></span><span class="token punctuation">{</span>      <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ul><li>一个<code>path</code>可以指定多个<code>components</code></li><li>路由对象的<code>components</code>中<code>name</code>的内容是个字符串</li><li><code>flex: flex-grow flex-shrink flex-basis|auto|initial|inherit;</code></li><li><code>flex-grow</code>是一个数字，规定项目将相对于其他灵活的项目进行扩展的量</li><li><a href="https://www.runoob.com/cssref/css3-pr-flex.html" target="_blank" rel="noopener">https://www.runoob.com/cssref/css3-pr-flex.html</a></li></ul><h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol><li><code>computed</code><ul><li>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。</li><li>主要当作属性来使用；</li><li>必须要<code>return</code></li></ul></li><li><code>methods</code><ul><li>方法表示一个具体的操作，主要书写业务逻辑；</li></ul></li><li><code>watch</code><ul><li>一个对象，键是需要观察的表达式，值是对应回调函数。</li><li>主要用来监听某些特定数据（尤其是不可观测的，如路由）的变化，从而进行某些具体的业务逻辑操作；</li><li>可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ul></li></ol><h3 id="method方法的使用"><a href="#method方法的使用" class="headerlink" title="method方法的使用"></a><code>method</code>方法的使用</h3><p>但是如果无法用事件绑定处理的数据变化，就无法用method，例如路由的变化。</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 分析： --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1. 我们要监听到 文本框数据的改变，这样才能知道 什么时候去拼接 出一个 fullname --></span>    <span class="token comment" spellcheck="true">&lt;!-- 2. 如何监听到 文本框的数据改变呢？？？ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstname<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getFullname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> +    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastname<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getFullname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> =    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fullname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstname<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        lastname<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        fullname<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">getFullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h3><ol><li>监听<code>data</code>中属性的改变：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> +    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> =    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">'chen'</span><span class="token punctuation">,</span>        fullName<span class="token punctuation">:</span> <span class="token string">'jack - chen'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//'监听的属性'：该属性变化时执行的函数</span>        <span class="token string">'firstName'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 第一个参数是新数据，第二个参数是旧数据</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'lastName'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> newVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>监听路由对象的改变：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>登录组件&lt;/h1>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>注册组件&lt;/h1>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      router<span class="token punctuation">:</span> router<span class="token punctuation">,</span>      watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'$route'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是登录组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h3><ol><li><p>默认只有<code>getter</code>的计算属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> + <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> = <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fullname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>     lastName<span class="token punctuation">:</span> <span class="token string">'chen'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span>     <span class="token string">'fullname'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//也可以直接写 fullname(){</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li>计算属性，在引用的时候，一定不要加 <code>()</code>去调用，直接把它 当作 普通 属性去使用就好了；</li><li>只要计算属性这个<code>function</code>内部，所用到的任何<code>data</code>中的数据发送了变化，就会立即重新计算这个计算属性的值</li><li>计算属性的求值结果会被缓存起来，方便下次直接使用;如果计算属性方法中，依赖的任何数据都没有发生过变化，则不会重新对计算属性求值；</li></ul><ol start="2"><li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改fullName<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>     lastName<span class="token punctuation">:</span> <span class="token string">'chen'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'TOM - chen2'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>     fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> parts <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' - '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记04</title>
      <link href="/2020/04/07/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B004/"/>
      <url>/2020/04/07/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B004/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔记04"><a href="#前端笔记04" class="headerlink" title="前端笔记04"></a>前端笔记04</h1><h2 id="Vue-resource"><a href="#Vue-resource" class="headerlink" title="Vue-resource"></a>Vue-resource</h2><h3 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h3><p><a href="https://www.runoob.com/vue2/vuejs-ajax.html" target="_blank" rel="noopener">Vue.js Ajax(vue-resource)</a><br><a href="https://www.runoob.com/vue2/vuejs-ajax-axios.html" target="_blank" rel="noopener">Vue.js Ajax(axios)</a></p><p>由于已经导入了 Vue-resource这个包，所以 ，可以直接通过  <code>this.$http</code> 来发起数据请求</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>当通过 then 指定回调函数之后，在回调函数中，可以拿到数据服务器返回的 result</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><p>接收三个参数：</p><ul><li>第一个参数： 要请求的URL地址</li><li>第二个参数： 要提交给服务器的数据 ，要以<strong>对象</strong>形式提交给服务器 <code>{ name: this.name }</code></li><li>第三个参数： 是一个配置对象，要以哪种表单数据类型提交过去，<strong><code>{ emulateJSON: true }</code></strong>, 以普通表单格式，将数据提交给服务器 <code>application/x-www-form-urlencoded</code></li></ul><p>在 post 方法中，使用 <code>.then</code> 来设置成功的回调函数，如果想要拿到成功的结果，需要 <code>result.body</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局配置了，请求的数据接口 根域名</span>Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span>options<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token string">'http://vue.studyit.io/'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在每次单独发起 http 请求的时候，请求的 url 路径，应该以相对路径开头，前面不能带 /  </span><span class="token comment" spellcheck="true">//否则 不会启用根路径做拼接；</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'api/getprodlist'</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可以全局启用 emulateJSON 选项</span>Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span>options<span class="token punctuation">.</span>emulateJSON <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//post()不用配置第三个参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'api/addproduct'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="使用过渡类名实现动画"><a href="#使用过渡类名实现动画" class="headerlink" title="使用过渡类名实现动画"></a>使用过渡类名实现动画</h3><p><code>v-enter</code>,<code>v-leave-to</code>,<code>v-enter-active</code>,<code>v-leave-active</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 */</span>    <span class="token comment" spellcheck="true">/* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 */</span>    <span class="token selector"><span class="token class">.v-enter</span>,    <span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">150</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* v-enter-active 【入场动画的时间段】 */</span>    <span class="token comment" spellcheck="true">/* v-leave-active 【离场动画的时间段】 */</span>    <span class="token selector"><span class="token class">.v-enter-active</span>,    <span class="token class">.v-leave-active</span></span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.8</span>s ease<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1. 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --></span>    <span class="token comment" spellcheck="true">&lt;!-- transition 元素，是 Vue 官方提供的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个H3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="在-lt-transition-gt-中修改v-前缀"><a href="#在-lt-transition-gt-中修改v-前缀" class="headerlink" title="在<transition>中修改v-前缀"></a>在&lt;transition&gt;中修改v-前缀</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.my-enter</span>,    <span class="token class">.my-leave-to</span> </span><span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">70</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.my-enter-active</span>,    <span class="token class">.my-leave-active</span></span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.8</span>s ease<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个H6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="使用第三方类实现动画"><a href="#使用第三方类实现动画" class="headerlink" title="使用第三方类实现动画"></a>使用第三方类实现动画</h3><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">animate.css</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./animate.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 入场 bounceIn    离场 bounceOut --></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用 :duration="毫秒值" 来统一设置 入场 和 离场 时候的动画时长 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用  :duration="{ enter: 200, leave: 400 }"  来分别设置 入场的时长 和 离场的时长  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>     <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bounceIn<span class="token punctuation">"</span></span>     <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bounceOut<span class="token punctuation">"</span></span>     <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ enter: 200, leave: 400 }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个H3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="使用钩子函数实现半场动画"><a href="#使用钩子函数实现半场动画" class="headerlink" title="使用钩子函数实现半场动画"></a>使用钩子函数实现半场动画</h3><p><code>&lt;transition @before-enter="beforeEnter" @enter="enter" @after-enter="afterEnter"&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>快到碗里来<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">=</span>!flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1. 使用 transition 元素把 小球包裹起来 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 钩子函数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>      <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeEnter<span class="token punctuation">"</span></span>      <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enter<span class="token punctuation">"</span></span>      <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterEnter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        flag<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意： 动画钩子函数的第一个参数：el，表示 要执行动画的那个DOM元素，是个原生的 JS DOM对象</span>        <span class="token comment" spellcheck="true">// 大家可以认为 ， el 是通过 document.getElementById('') 方式获取到的原生JS DOM对象</span>        <span class="token function">beforeEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式</span>          <span class="token comment" spellcheck="true">// 设置小球开始动画之前的，起始位置</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(0, 0)"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">enter</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 这句话，没有实际的作用，但是，如果不写，出不来动画效果；</span>          <span class="token comment" spellcheck="true">// 可以认为 el.offsetWidth 会强制动画刷新</span>          el<span class="token punctuation">.</span>offsetWidth          <span class="token comment" spellcheck="true">// enter 表示动画 开始之后的样式，这里，可以设置小球完成动画之后的，结束状态</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(150px, 450px)"</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'all 1s ease'</span>          <span class="token comment" spellcheck="true">// 这里的 done， 其实就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</span>          <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">afterEnter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 动画完成之后，会调用 afterEnter</span>          <span class="token comment" spellcheck="true">// console.log('ok')</span>          <span class="token comment" spellcheck="true">// 第一个功能，是控制小球的显示与隐藏</span>          <span class="token comment" spellcheck="true">// 第二个功能： 直接跳过后半场动画，让 flag 标识符 直接变为 false</span>          <span class="token comment" spellcheck="true">// 当第二次再点击 按钮的时候， flag  false  ->    true</span>          <span class="token comment" spellcheck="true">// Vue 把一个完整的动画，使用钩子函数，拆分为了两部分：</span>          <span class="token comment" spellcheck="true">// 我们使用 flag 标识符，来表示动画的切换；</span>          <span class="token comment" spellcheck="true">// 刚以开始，flag = false  ->   true   ->   false</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="el-offsetWidth"><a href="#el-offsetWidth" class="headerlink" title="el.offsetWidth"></a>el.offsetWidth</h4><p>没有实际的作用，但是，如果不写，出不来动画效果。可以认为 el.offsetWidth 会强制动画刷新。</p><h4 id="done"><a href="#done" class="headerlink" title="done()"></a>done()</h4><p>这里的 done， 其实就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</p><h3 id="实现列表动画"><a href="#实现列表动画" class="headerlink" title="实现列表动画"></a>实现列表动画</h3><ul><li>在实现列表过渡的时候，如果需要过渡的元素，是通过 <code>v-for</code> 循环渲染出来的，不能使用 <code>transition</code> 包裹，需要使用 <code>transitionGroup</code> </li><li>如果要为 <code>v-for</code> 循环创建的元素设置动画，必须为每一个元素设置<code>:key</code>属性</li><li>给 <code>transition-group</code> 添加 <code>appear</code> 属性，实现页面刚展示出来时候，入场时候的效果</li><li>通过 为 <code>transition-group</code> 元素，设置 <code>tag</code> 属性，指定 <code>transition-group</code> 渲染为指定的元素，如果不指定 <code>tag</code> 属性，默认，渲染为 <code>span</code> 标签</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.v-enter</span>,    <span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.v-enter-active</span>,    <span class="token class">.v-leave-active</span> </span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.6</span>s ease<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span>    <span class="token selector"><span class="token class">.v-move</span> </span><span class="token punctuation">{</span>      <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.6</span>s ease<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.v-leave-active</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*如果不设置宽度，默认列表显示动画时是最小宽度，因此要在&lt;li>中设置width: 100%; */</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --></span>      <span class="token comment" spellcheck="true">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性 --></span>      <span class="token comment" spellcheck="true">&lt;!-- 给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果 --></span>      <span class="token comment" spellcheck="true">&lt;!-- 通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition-group</span> <span class="token attr-name">appear</span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, i) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del(i)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{item.id}} --- {{item.name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition-group</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>      </code></pre><ul><li><code>.v-move</code> 和 <code>.v-leave-active</code> 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果</li><li>如果不设置宽度，默认列表显示动画时是最小宽度，因此要在<code>&lt;li&gt;</code>中设置<code>width: 100%</code>;</li></ul><h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><p><strong>什么是组件：</strong><br> 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br><strong>组件化和模块化的不同：</strong></p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；</li></ul><h3 id="定义全局组件"><a href="#定义全局组件" class="headerlink" title="定义全局组件"></a>定义全局组件</h3><h4 id="使用-Vue-extend-配合-Vue-component-方法："><a href="#使用-Vue-extend-配合-Vue-component-方法：" class="headerlink" title="使用 Vue.extend 配合 Vue.component 方法："></a><strong>使用 Vue.extend 配合 Vue.component 方法：</strong></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 template 属性，指定了组件要展示的HTML结构</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>登录&lt;/h1>'</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 Vue.component('组件的名称', 创建出来的组件模板对象)</span>    <span class="token comment" spellcheck="true">// 通过  Vue.component 把 组件模板对象，注册为一个全局的Vue 组件</span>    <span class="token comment" spellcheck="true">// 同时，为这个组件起了一个名称，可以让我们  通过 标签形式，在页面中直接引入这个组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接；<br>例如：<code>Vue.component('myCom1', login) &lt;my-com1&gt;&lt;/my-com1&gt;</code><br>如果不使用驼峰,则直接拿名称来使用即可;</p><h4 id="直接使用-Vue-component-方法："><a href="#直接使用-Vue-component-方法：" class="headerlink" title="直接使用 Vue.component 方法："></a><strong>直接使用 Vue.component 方法：</strong></h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 第一个参数:组件的名称,将来在引用组件的时候,就是一个 标签形式 来引入 它的</span>    <span class="token comment" spellcheck="true">// 第二个参数: Vue.extend 创建的组件  ,其中 template 就是组件将来要展示的HTML内容</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mycom1'</span><span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>这是使用 Vue.extend 创建的组件&lt;/h3>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>注册&lt;/h1>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'mycom2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>&lt;h3>这是直接使用 Vue.component 创建出来的组件&lt;/h3>&lt;span>123&lt;/span>&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</p><h4 id="将模板字符串，定义到script标签中："><a href="#将模板字符串，定义到script标签中：" class="headerlink" title="将模板字符串，定义到script标签中："></a><strong>将模板字符串，定义到script标签中：</strong></h4><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tmpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>好用,不错!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tmpl<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>同时，需要使用 <code>Vue.component</code> 来定义组件：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'account'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'#tmpl'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="定义私有组件"><a href="#定义私有组件" class="headerlink" title="定义私有组件"></a>定义私有组件</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>1234&lt;/h1>'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// '组件的名称': 组件的模板对象</span>        <span class="token comment" spellcheck="true">// 'mylogin': login</span>        login      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol><li>在组件中，<code>data</code>需要被定义为一个方法，例如：<pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'account'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   template<span class="token punctuation">:</span> <span class="token string">'#tmpl'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 组件中的 data 除了必须为一个方法之外,这个方法内部,还必须返回一个对象才行;</span>   <span class="token comment" spellcheck="true">// 组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       msg<span class="token punctuation">:</span> <span class="token string">'大家好！'</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>     <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击了登录按钮'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>组件中的 data 除了必须为一个方法之外,这个方法内部,还必须<strong>返回一个对象</strong>才行;<br>组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!</li></ol><h3 id="组件切换方式"><a href="#组件切换方式" class="headerlink" title="组件切换方式"></a>组件切换方式</h3><h4 id="使用flag（只能切换两种）"><a href="#使用flag（只能切换两种）" class="headerlink" title="使用flag（只能切换两种）"></a>使用<code>flag</code>（只能切换两种）</h4><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">v-else</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>register</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>登录组件&lt;/h3>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>注册组件&lt;/h3>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        flag<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="使用-lt-component-gt-（切换多种）"><a href="#使用-lt-component-gt-（切换多种）" class="headerlink" title="使用<component> （切换多种）"></a>使用<code>&lt;component&gt;</code> （切换多种）</h4><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">=</span><span class="token punctuation">'</span>login<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">=</span><span class="token punctuation">'</span>register<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Vue提供了 component ,来展示对应名称的组件 --></span>    <span class="token comment" spellcheck="true">&lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 组件名称是 字符串</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>登录组件&lt;/h3>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;h3>注册组件&lt;/h3>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        comName<span class="token punctuation">:</span> <span class="token string">'login'</span> <span class="token comment" spellcheck="true">// 当前 component 中的 :is 绑定的组件的名称</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="切换动画"><a href="#切换动画" class="headerlink" title="切换动画"></a>切换动画</h5><p>用<code>&lt;transition&gt;</code>包住<code>&lt;component&gt;</code></p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- 用transition元素包住component元素 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">=</span><span class="token punctuation">'</span>login<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">=</span><span class="token punctuation">'</span>register<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通过 mode 属性,设置组件切换时候的 模式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ol><li><p>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span>     msg<span class="token punctuation">:</span> <span class="token string">'这是父组件中的消息'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   components<span class="token punctuation">:</span> <span class="token punctuation">{</span>     son<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意： 子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上；</span>         <span class="token comment" spellcheck="true">// data 上的数据，都是可读可写的；</span>         <span class="token keyword">return</span> <span class="token punctuation">{</span>           title<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>           content<span class="token punctuation">:</span> <span class="token string">'qqq'</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       template<span class="token punctuation">:</span> <span class="token string">'&lt;h1>这是子组件 --- {{finfo}}&lt;/h1>'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 注意： 组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的</span>       <span class="token comment" spellcheck="true">// props 中的数据，都是只读的，无法重新赋值</span>       <span class="token comment" spellcheck="true">// 把父组件传递过来的 parentmsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据</span>       props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'finfo'</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">:finfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><ol><li><p><strong>原理：</strong></p><ul><li>父组件使用的<strong>事件绑定机制v-on</strong>，传递方法的引用到子组件内部，</li><li>子组件在内部<strong>调用父组件传递过来的方法</strong>，</li><li>同时把要发送给父组件的数据，在调用方法的时候<strong>当作参数传递</strong>进去；</li></ul></li><li><p><strong>父组件将方法的引用传递给子组件</strong></p><ul><li><code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，</li><li><code>func</code>是子组件调用传递过来方法时候的方法名称<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">@func</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>子组件内部通过<code>this.$emit('方法名', 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 引用父组件 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">@func</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 组件模板定义 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token operator">&lt;</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"向父组件传值"</span> @click<span class="token operator">=</span><span class="token string">"sendMsg"</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">// 子组件的定义方式</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'son'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   template<span class="token punctuation">:</span> <span class="token string">'#son'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 组件模板Id</span>   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>       sonmsg<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小头儿子'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">6</span> <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 按钮的点击事件</span>       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'func'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sonmsg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父组件传递过来的方法，同时把数据传递出去</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>   data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token function">getMsg</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span>       <span class="token function">alert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="组件中data和props的区别"><a href="#组件中data和props的区别" class="headerlink" title="组件中data和props的区别"></a>组件中data和props的区别</h4><ol><li><ul><li>子组件中的 <strong>data</strong>数据，并不是通过 父组件传递过来的，而是<strong>子组件自身私</strong>有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到 data 身上；</li><li>组件中的所有 <strong>props</strong>中的数据，都是通过<strong>父组件传递给子组件</strong>的</li></ul></li><li><ul><li><strong>data</strong> 上的数据，都是<strong>可读可写</strong>的；</li><li><strong>props</strong> 中的数据，都是<strong>只读</strong>的，无法重新赋值</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HARRY POTTER TMI</title>
      <link href="/2020/04/06/HARRY-POTTER-TMI/"/>
      <url>/2020/04/06/HARRY-POTTER-TMI/</url>
      
        <content type="html"><![CDATA[<h1 id="HARRY-POTTER-TMI"><a href="#HARRY-POTTER-TMI" class="headerlink" title="HARRY POTTER TMI"></a>HARRY POTTER TMI</h1><p>该笔记内容来自视频<a href="https://www.bilibili.com/video/BV1FJ41177Sm/" target="_blank" rel="noopener"> 哈利解说</a><br>这系列视频讲的真的很不错，哈迷冲呀！</p><h2 id="SMALL-TMI"><a href="#SMALL-TMI" class="headerlink" title="SMALL TMI"></a>SMALL TMI</h2><ul><li><p>1930：Global wizarding war 全球魔法大战（欧洲大陆，除了英国）发起人格林德沃。</p></li><li><p>1970：The first wizarding war 第一次魔法大战（发生在英国）发起人伏地魔。</p></li><li><p>戈德里克山谷（Godric’s Hollow）是哈利一家藏身的地方，也曾是格兰芬多家族和邓布利多居住的地方。</p></li><li><p>飞天摩托是小天狼星借给海格的。</p></li><li><p>德思礼夫妇家地址：萨里郡，小惠金区，女贞路4号。</p></li><li><p>奥利凡德魔杖店 SINCE 382.B.C（大概春秋战国时期）。</p></li><li><p>哈利和伏地魔的魔杖的杖芯出自同一只凤凰的羽毛。</p></li><li><p>破釜酒吧是对角巷1号。</p></li><li><p>古灵阁687号金库：哈利爸妈的遗产。</p></li><li><p>古灵阁713号金库：魔法石。</p></li><li><p>古灵阁货币等级：金加隆，银西可，铜纳特。</p></li><li><p>罗琳父母相遇在从国王十字车站出发前往苏格兰的火车上。</p></li><li><p>霍格沃兹的班车：国王十字车站-霍格莫德（魔法村，对三年级以上的学生开放）</p></li><li><p>霍格沃兹的班车一年六趟：开学季，圣诞节，复活节。</p></li><li><p>霍格沃兹在英国高地的某处，被魔法封印，麻瓜只能看到一片废墟。</p></li><li><p>霍格沃兹的主塔（有旋转楼梯的地方）有7层。</p></li><li><p>拥有开天眼（Inner Eye）预言能力的只有特里劳妮和她的曾曾祖母。</p></li><li><p>尼克勒梅，魔法石的主人。魔法石可以点石成金，制造长生不死魔药。</p></li><li><p>波特家族也是纯血家族，但是不在纯血28里，因为列表人觉得“波特”听起来太麻瓜。</p></li><li><p>厄里斯之镜上的话倒过来是：I show not your face but your hearts desire。</p></li><li><p>魔法石被邓布利多附魔藏在厄里斯之镜中，只有不是为了欲望而是想保护它的人才能得到。</p></li><li><p>汤姆里德尔和斯莱特林有血缘关系（斯莱特林继承人kkk）。</p></li><li><p>伏地魔和哈利都是混血巫师。</p></li><li><p>斯莱特林最初造密室是为了让学生练习黑魔法。</p></li><li><p>伏地魔的第一个魂器时是日记本（封印了16岁灵魂和记忆），通过放出蛇怪谋杀桃金娘制造。</p></li><li><p>密室蛇怪是鸡蛋由蟾蜍孵化而来（斯莱特林跑路前放进去的）。</p></li><li><p>密室入口：桃金娘的洗手间的洗手池一个水龙头的一侧的蛇形印记，用蛇佬腔说“打开”可以开启。</p></li><li><p>伏地魔的灭亡让家养小精灵的生活产生了光和希望，所以在多比看来，哈利=希望之光。</p></li><li><p>打人柳下是一个长隧道的入口，通往魔法村的尖叫棚屋（邓布利多为了掩护卢平变身造的）。</p></li><li><p>斯莱特林宿舍入口：入口厅往湖边的方向。</p></li><li><p>斯莱特林宿舍在地牢层（斯莱特林自己定的），休息室在湖底。</p></li><li><p>1943年（杀桃金娘那年），汤姆里德尔得了学校特殊贡献奖（可能因为举报了海格？）</p></li><li><p>疯眼汉穆迪的假眼能看穿隐形斗篷。</p></li><li><p>卢平是5岁被狼人报复咬伤的（父亲是魔法部工作人员，歧视狼人）。</p></li><li><p>卢平的守护神是一只普通的狼，他使用呼神守卫时会可以隐藏守护神形态。</p></li><li><p>狼人每月满月时被动转化，会失去理智攻击人类，但几乎不攻击其他物种。</p></li><li><p>狼人传播途径是咬人。狼人也可交配生出高智商狼崽。</p></li><li><p>小天狼星进格兰芬多宿舍，是沟通克鲁克山（赫敏的猫）偷了纳威写的口令纸条给他。</p></li><li><p>摄魂怪是阿兹卡班的土著，强大的黑暗生物，无法被杀死，会吸快乐，和平，幸福。</p></li><li><p>摄魂怪范围式攻击：吸快乐；一对一攻击（摄魂怪之吻）：吸灵魂，没灵魂就是植物人。</p></li><li><p>小天狼星家族的名字都是由星座命名的。</p></li><li><p>阿尼马斯格斯(Animagus)变身动物时无法选择什么动物，变身不需要用魔杖。</p></li><li><p>伏地魔把阿吉尼做成魂器是通过杀了乔金斯（火焰杯那部，魔法部职员）。</p></li><li><p>伏地魔的小躯壳是彼得用独角兽血液和纳吉尼的毒液做的。</p></li></ul><h2 id="BIG-TMI"><a href="#BIG-TMI" class="headerlink" title="BIG TMI"></a>BIG TMI</h2><h3 id="特里劳妮的预言"><a href="#特里劳妮的预言" class="headerlink" title="特里劳妮的预言"></a>特里劳妮的预言</h3><p>1980夏，特里劳妮（Inner Eye）在面试时对邓布利多抛出预言：</p><blockquote><p>The one with the power to vanquish the Dark Lord approaches…<br>born to those who have thrice defied him,<br>born as the seventh month dies…<br>and the Dark Lord will mark him as his equal, （咒语反弹后，伏地魔传送部分法力/灵魂给哈利）<br>but he will have power the Dark Lord knows not… （莉莉的爱）<br>and either must die at the hand of the other<br>for neither can live while the other survives…</p></blockquote><p>前四句被斯内普听到，汇报给伏地魔</p><h3 id="赤胆忠心咒"><a href="#赤胆忠心咒" class="headerlink" title="赤胆忠心咒"></a>赤胆忠心咒</h3><ul><li>秘密封印在秘密守护者(活人)身上</li><li>即使这个秘密之前有别人知道，但秘密封印之后，只有秘密守护者可以把秘密告诉他人，其他人无法说出来</li><li>除非秘密守护者自愿说出，无论如何折磨也无法得到秘密</li><li>秘密守护者死去，其他知道秘密的人成为下一个守护者</li></ul><h3 id="掠夺者天团（The-Marauders）"><a href="#掠夺者天团（The-Marauders）" class="headerlink" title="掠夺者天团（The Marauders）"></a>掠夺者天团（The Marauders）</h3><ul><li>卢平：Moony 月亮脸（狼人）</li><li>詹姆：Prongs 尖头叉子（牡鹿的角）</li><li>小天狼星：Padfoot 大脚板（黑狗爪爪）</li><li>彼得：Wormtail 虫尾巴（老鼠尾巴）</li></ul><h3 id="为什么让哈利寄养在佩妮家"><a href="#为什么让哈利寄养在佩妮家" class="headerlink" title="为什么让哈利寄养在佩妮家"></a>为什么让哈利寄养在佩妮家</h3><ul><li>哈利身上，莉莉的爱的保护层在17岁成年前一直有效</li><li>莉莉的亲情血缘是维系这个魔法的重要因素</li><li>邓布利多用莉莉的“牺牲、血缘、爱”激活加强了这种魔法</li><li>“血缘纽带”是哈利最强保护盾</li></ul><h3 id="海格的经历"><a href="#海格的经历" class="headerlink" title="海格的经历"></a>海格的经历</h3><ul><li>霍格沃兹的钥匙管理员和场地看守</li><li>曾是格兰芬多学生</li><li>在三年级时被汤姆里德尔陷害（杀害桃金娘）被学校开除+折断魔杖+禁用魔法</li><li>邓布利多留下海格</li><li>邓布利多用老魔杖部分修复了海格的魔杖，并嵌入他的伞里</li></ul><h3 id="三人组生日"><a href="#三人组生日" class="headerlink" title="三人组生日"></a>三人组生日</h3><p>赫敏（1979/09/19）<br>罗恩（1980/03/01）<br>哈利（1980/07/31）</p><h3 id="韦斯莱七兄妹"><a href="#韦斯莱七兄妹" class="headerlink" title="韦斯莱七兄妹"></a>韦斯莱七兄妹</h3><ol><li>大哥（在埃及工作）</li><li>查理 （已经毕业的格兰芬多魁地奇前找球手）</li><li>珀西（格兰芬多级长）</li><li>弗雷德</li><li>乔治</li><li>罗恩</li><li>金妮</li></ol><h3 id="奥利凡德的三种杖芯"><a href="#奥利凡德的三种杖芯" class="headerlink" title="奥利凡德的三种杖芯"></a>奥利凡德的三种杖芯</h3><ul><li>独角兽的毛 Unicorn hair<ul><li>✔ 稳定性好，黑魔抗高，忠诚</li><li>❌ 天花板有限，需要维修</li><li>使用者：罗恩，马尔福，卢平</li></ul></li><li>龙的心弦 Dragon heartstring<ul><li>✔ 潜力大 适应性强</li><li>❌ 不够忠心，容易陷入黑魔法，难以驾驭</li><li>使用者：赫敏，麦格</li></ul></li><li>凤凰的羽毛 Phoenix feather<ul><li>✔ 最稀有，能够掌握魔法范围最广</li><li>❌ 挑剔</li><li>使用者：哈利（7金加隆买的），伏地魔</li></ul></li></ul><h3 id="格兰芬多魁地奇传奇队友"><a href="#格兰芬多魁地奇传奇队友" class="headerlink" title="格兰芬多魁地奇传奇队友"></a>格兰芬多魁地奇传奇队友</h3><ul><li>詹姆波特：找球手</li><li>麦格教授（送了哈利光轮2000）</li><li>查理（罗恩二哥）</li><li>弗雷德&amp;乔治</li><li>伍德（哈利当时的格兰芬多队长）</li></ul><h3 id="巫师交通工具"><a href="#巫师交通工具" class="headerlink" title="巫师交通工具"></a>巫师交通工具</h3><ul><li>飞路粉<ul><li>抓着念咒语</li><li>壁炉-壁炉</li></ul></li><li>飞天扫帚</li><li>骑士巴士<ul><li>站在路阶上掏出魔杖就会出现</li><li>能去任何地方</li><li>麻瓜看不到</li></ul></li><li>门钥匙(Portkey)<ul><li>可以是任意物体</li><li>附魔后触碰它的人可以立刻传送到门钥匙指定地点</li><li>可多人同时传送</li><li>全英国大概200个（多用于定点远程传送）</li></ul></li><li>麻瓜火车</li></ul><h3 id="三强争霸赛"><a href="#三强争霸赛" class="headerlink" title="三强争霸赛"></a>三强争霸赛</h3><ul><li>英国-霍格沃兹</li><li>法国-布斯巴顿<ul><li>校友：尼格勒梅</li><li>校长：马克西姆（海格老相好）</li></ul></li><li>北欧-德姆斯特朗<ul><li>教黑魔法</li><li>校友：格林德沃，维克多克鲁姆（世界魁地奇大赛的明星追球手）</li><li>校长：伊戈尔卡卡洛夫（食死徒，将功赎罪被释放）</li></ul></li></ul><h3 id="霍格沃兹地图"><a href="#霍格沃兹地图" class="headerlink" title="霍格沃兹地图"></a>霍格沃兹地图</h3><p><img src="map1.png" alt="霍格沃兹地图1" title="霍格沃兹地图1"><br><img src="map2.png" alt="霍格沃兹地图2" title="霍格沃兹地图2"><br><img src="map3.png" alt="霍格沃兹地图3" title="霍格沃兹地图3"><br><img src="map4.png" alt="霍格沃兹地图4" title="霍格沃兹地图4"></p><h3 id="魁地奇规则"><a href="#魁地奇规则" class="headerlink" title="魁地奇规则"></a>魁地奇规则</h3><p><img src="ball.png" alt="魁地奇规则" title="魁地奇规则"></p><h3 id="霍格沃兹一年级必修课"><a href="#霍格沃兹一年级必修课" class="headerlink" title="霍格沃兹一年级必修课"></a>霍格沃兹一年级必修课</h3><p><img src="subject1.png" alt="必修课" title="必修课"></p><h3 id="神圣28纯血家族"><a href="#神圣28纯血家族" class="headerlink" title="神圣28纯血家族"></a>神圣28纯血家族</h3><p><img src="sacred28.png" alt="纯血28家族" title="纯血28家族"></p><h2 id="剧情-TMI"><a href="#剧情-TMI" class="headerlink" title="剧情 TMI"></a>剧情 TMI</h2><h3 id="伏地魔控制金妮开启密室"><a href="#伏地魔控制金妮开启密室" class="headerlink" title="伏地魔控制金妮开启密室"></a>伏地魔控制金妮开启密室</h3><ul><li>在对角巷，日记被卢修斯放到金妮的书桶里</li><li>金妮跟日记交流太多有了情感依赖，汤姆灵魂进入她的身体</li><li>金妮清醒，把日记丢在洗手间，打中桃金娘</li><li>桃金娘淹了洗手间，哈利去查看，日记被哈利发现</li><li>金妮害怕，偷回日记。汤姆控制金妮</li><li>金妮越虚弱汤姆越强大，最终灵魂实体化</li></ul><h3 id="哈利打败蛇怪"><a href="#哈利打败蛇怪" class="headerlink" title="哈利打败蛇怪"></a>哈利打败蛇怪</h3><ul><li>哈利的忠心召唤出福克斯，福克斯带来分院帽</li><li>哈利戴着分院帽求助，召唤出格兰芬多之剑杀了蛇怪</li><li>哈利被毒牙所伤，福克斯眼泪治愈哈利伤口</li><li>哈利用毒牙毁了日记本</li></ul><h3 id="哈利得到掠夺者地图"><a href="#哈利得到掠夺者地图" class="headerlink" title="哈利得到掠夺者地图"></a>哈利得到掠夺者地图</h3><ul><li>地图被费尔奇（宿管）没收</li><li>弗莱德和乔治从费尔奇那里偷拿</li><li>送给哈利</li></ul><h3 id="小天狼星越狱"><a href="#小天狼星越狱" class="headerlink" title="小天狼星越狱"></a>小天狼星越狱</h3><ul><li>韦斯莱一家中了预言家日报抽奖700金加隆，上报</li><li>魔法部部长福吉去阿兹卡班视察，小天狼星问福吉要他手上的报纸看</li><li>看到韦斯莱一家照片，认出罗恩的老鼠斑斑是彼得（斑斑是珀西传给罗恩的）</li><li>报纸写罗恩他们假期后要回霍格沃兹，担心彼得伤害哈利</li><li>变大黑狗越狱（摄魂兽对动物不敏感）</li></ul><h3 id="伏地魔重返魔法界"><a href="#伏地魔重返魔法界" class="headerlink" title="伏地魔重返魔法界"></a>伏地魔重返魔法界</h3><ul><li>魔法部员工乔金斯去老克劳奇家要签名，发现家庭精灵闪闪在和空气说话</li><li>乔金斯发现小克劳奇没死，生活在隐形斗篷下（被他爸施了夺魂咒）</li><li>老克劳奇修改乔金斯记忆</li><li>乔金斯去阿尔巴尼亚（伏地魔所在地）度假</li><li>乔金斯偶遇彼得，彼得骗她去见伏地魔</li><li>伏地魔发现乔金斯记忆被修改过，读取记忆</li><li>伏地魔得知：<ul><li>小克劳奇没死</li><li>即将举办三强争霸赛&amp;世界魁地奇大赛</li><li>穆迪要上任霍格沃兹黑魔法防御课老师</li></ul></li></ul><p>TBC.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 哈利波特 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈利波特 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery使用指南</title>
      <link href="/2020/04/02/jQuery%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-0/"/>
      <url>/2020/04/02/jQuery%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-0/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery使用指南"><a href="#jQuery使用指南" class="headerlink" title="jQuery使用指南"></a>jQuery使用指南</h1><p><strong>本文非原创，来源不明，仅供个人学习，如侵权会及时删除。</strong></p><h2 id="为什么要学jquery"><a href="#为什么要学jquery" class="headerlink" title="为什么要学jquery"></a>为什么要学jquery</h2><p>使用javascript开发过程中，有许多的缺点：</p><ol><li>查找元素的方法单一，麻烦。</li><li>遍历数组很麻烦，通常要嵌套一大堆的for循环。</li><li>有兼容性问题。</li><li>想要实现简单的动画效果，也很麻烦</li><li>代码冗余。</li></ol><h2 id="体验jquery的使用"><a href="#体验jquery的使用" class="headerlink" title="体验jquery的使用"></a>体验jquery的使用</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** 1. 查找元素的方法多种多样，非常灵活* 2. 拥有隐式迭代特性，因此不再需要手写for循环了。* 3. 完全没有兼容性问题。* 4. 实现动画非常简单，而且功能更加的强大。* 5. 代码简单、粗暴。* */</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"我是内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="jquery到底是什么"><a href="#jquery到底是什么" class="headerlink" title="jquery到底是什么"></a>jquery到底是什么</h2><blockquote><p>jQuery的官网 <a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a><br>jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</p></blockquote><p><strong>What is jQuery?</strong></p><pre class=" language-text"><code class="language-text">   jQuery is a fast, small, and feature-rich JavaScript library.    It makes things like HTML document traversal and manipulation,    event handling, animation, and Ajax    much simpler with an easy-to-use API that works across a multitude of browsers.    With a combination of versatility and extensibility,    jQuery has changed the way that millions of people write JavaScript. </code></pre><p>js库：把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。<br>（animate.js、common.js）</p><p>我们知道了，jQuery其实就是一个js文件，里面封装了一大堆的方法方便我们的开发，<br>其实就是一个加强版的common.js，因此我们学习jQuery，其实就是学习jQuery这个js文件中封装的一大堆方法。</p><h2 id="jquery的版本问题"><a href="#jquery的版本问题" class="headerlink" title="jquery的版本问题"></a>jquery的版本问题</h2><blockquote><p>官网下载地址：<a href="http://jquery.com/download/" target="_blank" rel="noopener">http://jquery.com/download/</a><br>jQuery版本有很多，分为1.x 2.x 3.x<br>1.x和2.x版本jquery都不再更新版本了，现在只更新3.x版本。</p></blockquote><p>大版本分类：</p><ul><li>1.x版本：能够兼容IE678浏览器</li><li>2.x版本：不能兼容IE678浏览器</li><li>3.x版本：不能兼容IE678浏览器，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）</li></ul><p>关于压缩版和未压缩版：  </p><ul><li>jquery-1.12.4.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。</li><li>jquery-1.12.4.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。</li></ul><h2 id="jquery的入口函数"><a href="#jquery的入口函数" class="headerlink" title="jquery的入口函数"></a>jquery的入口函数</h2><p>使用jQuery的三个步骤：</p><ol><li>引入jQuery文件</li><li>入口函数</li><li>功能实现</li></ol><p>关于jQuery的入口函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>jQuery入口函数与js入口函数的对比：</p><ol><li>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</li><li>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</li></ol><h2 id="jq对象和dom对象-重要"><a href="#jq对象和dom对象-重要" class="headerlink" title="jq对象和dom对象(重要)"></a>jq对象和dom对象(重要)</h2><ol><li>DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</li><li>jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</li><li>jQuery对象其实就是DOM对象的包装集<strong>包装了DOM对象的集合（伪数组）</strong></li><li>DOM对象与jQuery对象的方法不能混用。</li></ol><p>DOM对象转换成jQuery对象：【联想记忆：花钱】</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>domObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $(document).ready(function(){});就是典型的DOM对象转jQuery对象</span></code></pre><p>jQuery对象转换成DOM对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一种方法（推荐使用）</span>$li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//第二种方法</span>$li<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h2><h3 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h3><ul><li>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。<br>注意：jQuery选择器返回的是jQuery对象。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。<br>【查看jQuery文档】</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td align="left">获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td align="left">获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td align="left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td align="left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td align="left">获取class为redClass的div元素</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td align="left">使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td align="left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><blockquote><p>总结：这类选择器都带冒号</p></blockquote><h3 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器(方法)"></a>筛选选择器(方法)</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一次兄弟</td></tr></tbody></table><blockquote><p>总结：筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><p>【案例：下拉菜单】<br>【案例：突出展示】<br>【案例：手风琴】<br>【案例：淘宝精品】</p><h2 id="元素设置"><a href="#元素设置" class="headerlink" title="元素设置"></a>元素设置</h2><h3 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*1.设置一个样式*/</span>    <span class="token comment" spellcheck="true">//两个参数  设置的样式属性,具体样式</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传入对象（设置的样式属性:具体样式）</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.设置多个样式*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'green'</span><span class="token punctuation">,</span>        <span class="token string">'font-size'</span><span class="token punctuation">:</span><span class="token string">'20px'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="类名设置"><a href="#类名设置" class="headerlink" title="类名设置"></a>类名设置</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*1.添加一个类*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.删除一个类*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*3.切换一个类  有就删除没有就添加*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*4.匹配一个类  判断是否包含某个类  如果包含返回true否知返回false*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《tab切换》</code></p><h3 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*1.获取属性*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.设置属性*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*3.设置多个属性*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'18'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*4.删除属性*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《美女相册》</code></p><h3 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*对于布尔类型的属性，不要attr方法，应该用prop方法 prop用法跟attr方法一样。*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeProp</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《表格全选》</code></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*注意：动画的本质是改变容器的大小和透明度*/</span>    <span class="token comment" spellcheck="true">/*注意：如果不传参数是看不到动画*/</span>    <span class="token comment" spellcheck="true">/*注意：可传入特殊的字符  fast normal slow*/</span>    <span class="token comment" spellcheck="true">/*注意：可传入数字 单位毫秒*/</span>    <span class="token comment" spellcheck="true">/*1.展示动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.隐藏动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*3.切换展示和隐藏*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="滑入滑出"><a href="#滑入滑出" class="headerlink" title="滑入滑出"></a>滑入滑出</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*注意：动画的本质是改变容器的高度*/</span>    <span class="token comment" spellcheck="true">/*1.滑入动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.滑出动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*3.切换滑入滑出*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《下拉菜单》</code></p><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*注意：动画的本质是改变容器的透明度*/</span>    <span class="token comment" spellcheck="true">/*1.淡入动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.淡出动画*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*3.切换淡入淡出*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">'speed'</span><span class="token punctuation">,</span><span class="token string">'opacity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《轮播图》</code></p><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*    * 自定义动画    * 参数1：需要做动画的属性    * 参数2：需要执行动画的总时长    * 参数3：执行动画的时候的速度    * 参数4：执行动画完成之后的回调函数    * */</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'swing'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动画执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《手风琴菜单》</code></p><h3 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*    jQuery中有个动画队列的机制。    当我们对一个对象添加多次动画效果时后添加的动作就会被放入这个动画队列中，      等前面的动画完成后再开始执行。    可是用户的操作往往都比动画快，      如果用户对一个对象频繁操作时不处理动画队列就会造成队列堆积，    影响到效果。    */</span></code></pre><h3 id="stop使用"><a href="#stop使用" class="headerlink" title="stop使用"></a>stop使用</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*1.停止当前动画  如果动画队列当中还有动画立即执行*/</span>    <span class="token comment" spellcheck="true">//$('div').stop();</span>    <span class="token comment" spellcheck="true">/*2.和stop()效果一致  说明这是默认设置*/</span>    <span class="token comment" spellcheck="true">//$('div').stop(false,false);</span>    <span class="token comment" spellcheck="true">/*3.停止当前动画  清除动画队列*/</span>    <span class="token comment" spellcheck="true">//$('div').stop(true,false);</span>    <span class="token comment" spellcheck="true">/*4.停止当前动画并且到结束位置  清除了动画队列*/</span>    <span class="token comment" spellcheck="true">//$('div').stop(true,true);</span>    <span class="token comment" spellcheck="true">/*5.停止当前动画并且到结束位置  如果动画队列当中还有动画立即执行*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应案例：<code>案例-《音乐导航》</code><br>对应案例：<code>案例-《工具栏》</code></p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*创建节点*/</span>    <span class="token keyword">var</span> $a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">百度1&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*如果想克隆事件  false  true克隆事件*/</span>    <span class="token keyword">var</span> $cloneP <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加-amp-移动节点"><a href="#添加-amp-移动节点" class="headerlink" title="添加&amp;移动节点"></a>添加&amp;移动节点</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*追加自身的最后面  传对象和html格式代码*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">&lt;b>百度3&lt;/b>&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*追加到目标元素最后面  传目标元素的选择器或者对象*/</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">&lt;b>百度3&lt;/b>&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prepend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除节点-amp-清空节点"><a href="#删除节点-amp-清空节点" class="headerlink" title="删除节点&amp;清空节点"></a>删除节点&amp;清空节点</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/*1.清空box里面的元素*/</span>    <span class="token comment" spellcheck="true">/* 清理门户 */</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*2.删除某个元素*/</span>    <span class="token comment" spellcheck="true">/* 自杀 */</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【案例-《弹幕》】</p><h2 id="jQuery特殊属性操作"><a href="#jQuery特殊属性操作" class="headerlink" title="jQuery特殊属性操作"></a>jQuery特殊属性操作</h2><h3 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h3><blockquote><p>val方法用于设置和获取表单元素的值，例如input、textarea的值</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//设置值</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取值</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="html方法与text方法"><a href="#html方法与text方法" class="headerlink" title="html方法与text方法"></a>html方法与text方法</h3><blockquote><p>html方法相当于innerHTML  text方法相当于innerText</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//设置内容</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;span>这是一段内容&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取内容</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置内容</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'&lt;span>这是一段内容&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取内容</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>区别：html方法会识别html标签，text方法会那内容直接当成字符串，并不会识别html标签。</p><h3 id="width方法与height方法"><a href="#width方法与height方法" class="headerlink" title="width方法与height方法"></a>width方法与height方法</h3><blockquote><p>设置或者获取高度</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//带参数表示设置高度</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不带参数获取高度</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取网页的可视区宽高</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//获取可视区宽度</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取可视区高度</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h3><blockquote><p>设置或者获取垂直滚动条的位置</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//获取页面被卷曲的高度</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取页面被卷曲的宽度</span>    <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h3><blockquote><p>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素的位置。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//获取元素距离document的位置,返回值为对象：{left:100, top:100}</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取相对于其最近的有定位的父元素的位置。</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="jQuery事件机制"><a href="#jQuery事件机制" class="headerlink" title="jQuery事件机制"></a>jQuery事件机制</h2><blockquote><p>JavaScript中已经学习过了事件，但是jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</p></blockquote><h3 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a>jQuery事件发展历程(了解)</h3><p>简单事件绑定&gt;&gt;bind事件绑定&gt;&gt;delegate事件绑定&gt;&gt;on事件绑定(推荐)</p><blockquote><p>简单事件注册</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">click</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//单击事件</span>    <span class="token function">mouseenter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//鼠标进入事件</span>    <span class="token function">mouseleave</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//鼠标离开事件</span></code></pre><p>缺点：不能同时注册多个事件</p><blockquote><p>bind方式注册事件</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//第一个参数：事件类型</span>    <span class="token comment" spellcheck="true">//第二个参数：事件处理程序</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click mouseenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//事件响应方法</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：不支持动态事件绑定</p><blockquote><p>delegate注册委托事件</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 第一个参数：selector，要绑定事件的元素</span>    <span class="token comment" spellcheck="true">// 第二个参数：事件类型</span>    <span class="token comment" spellcheck="true">// 第三个参数：事件处理函数</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parentBox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为 .parentBox下面的所有的p标签绑定事件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p><blockquote><p>on注册事件</p></blockquote><h3 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h3><blockquote><p>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</p><p>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</p></blockquote><p>on注册简单事件</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>on注册委托事件</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>on注册事件的语法：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span>    <span class="token comment" spellcheck="true">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span>    <span class="token comment" spellcheck="true">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span>    <span class="token comment" spellcheck="true">// 第四个参数：handler，事件处理函数</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><blockquote><p>unbind方式（不用）</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑所有的事件</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑指定的事件</span></code></pre><blockquote><p>undelegate方式（不用）</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑所有的delegate事件</span>    <span class="token function">$</span><span class="token punctuation">(</span> selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span> <span class="token string">'click'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解绑所有的click事件</span></code></pre><blockquote><p>off方式（推荐）</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 解绑匹配元素的所有事件</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解绑匹配元素的所有click事件</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//触发 click事件</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h3><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//screenX和screenY    对应屏幕最左上角的值</span>    <span class="token comment" spellcheck="true">//clientX和clientY    距离页面左上角的位置（忽视滚动条）</span>    <span class="token comment" spellcheck="true">//pageX和pageY    距离页面最顶部的左上角的位置（会计算滚动条的距离）</span>    <span class="token comment" spellcheck="true">//event.keyCode    按下的键盘代码</span>    <span class="token comment" spellcheck="true">//event.data    存储绑定事件时传递的附加数据</span>    <span class="token comment" spellcheck="true">//event.stopPropagation()    阻止事件冒泡行为</span>    <span class="token comment" spellcheck="true">//event.preventDefault()    阻止浏览器默认行为</span>    <span class="token comment" spellcheck="true">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></code></pre><h2 id="jQuery补充知识点"><a href="#jQuery补充知识点" class="headerlink" title="jQuery补充知识点"></a>jQuery补充知识点</h2><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><blockquote><p>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></code></pre><p>【案例：五角星评分案例.html】</p><h3 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h3><blockquote><p>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</p></blockquote><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 参数一表示当前元素在所有匹配元素中的索引号</span>    <span class="token comment" spellcheck="true">// 参数二表示当前元素（DOM对象）</span>    <span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【案例：不同的透明度.html】</p><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><blockquote><p>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</p></blockquote><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> c <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放$的控制权,并且把$的能力给了c</span></code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><blockquote><p>插件：jquery不可能包含所有的功能，我们可以通过插件扩展jquery的功能。</p><p>jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。</p></blockquote><ol><li>jquery.color.js</li></ol><blockquote><p>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。</p></blockquote><p>使用插件的步骤</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//1. 引入jQuery文件</span>    <span class="token comment" spellcheck="true">//2. 引入插件（如果有用到css的话，需要引入css）</span>    <span class="token comment" spellcheck="true">//3. 使用插件</span></code></pre><ol start="2"><li>jquery.lazyload.js</li></ol><p>懒加载插件</p><h3 id="jquery-ui-js插件"><a href="#jquery-ui-js插件" class="headerlink" title="jquery.ui.js插件"></a>jquery.ui.js插件</h3><p>jQueryUI专指由jQuery官方维护的UI方向的插件。</p><p>官方API：<a href="http://api.jqueryui.com/category/all/" target="_blank" rel="noopener">http://api.jqueryui.com/category/all/</a></p><p>其他教程：<a href="http://www.runoob.com/jqueryui/jqueryui-tutorial.html" target="_blank" rel="noopener">jQueryUI教程</a></p><p>基本使用:</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//1.    引入jQueryUI的样式文件</span>    <span class="token comment" spellcheck="true">//2.    引入jQuery</span>    <span class="token comment" spellcheck="true">//3.    引入jQueryUI的js文件</span>    <span class="token comment" spellcheck="true">//4.    使用jQueryUI功能</span></code></pre><p>使用jquery.ui.js手风琴菜单</p><h2 id="制作jquery插件"><a href="#制作jquery插件" class="headerlink" title="制作jquery插件"></a>制作jquery插件</h2><blockquote><p>原理：jquery插件其实说白了就是给jquery对象增加一个新的方法，让jquery对象拥有某一个功能。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//通过给$.fn添加方法就能够扩展jquery对象</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span> pluginName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记03</title>
      <link href="/2020/04/02/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B003/"/>
      <url>/2020/04/02/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B003/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔记03"><a href="#前端笔记03" class="headerlink" title="前端笔记03"></a>前端笔记03</h1><h2 id="req-params-req-query-req-body的区别"><a href="#req-params-req-query-req-body的区别" class="headerlink" title="req.params,req.query,req.body的区别"></a>req.params,req.query,req.body的区别</h2><h3 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h3><p>用在<strong>get</strong>请求当中<br>url： <a href="http://localhost:3000/books/book/1" target="_blank" rel="noopener">http://localhost:3000/books/book/1</a><br>使用：把请求 / 后面的参数当成id，通过req.params就能获取到id<br>实例：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/books/book/:id'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a>req.query</h3><p>用在<strong>get</strong>请求当中<br>url：<a href="http://localhost:3000/toEditBook?id=1" target="_blank" rel="noopener">http://localhost:3000/toEditBook?id=1</a><br>实例：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/toEditBook"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h3><p>用在<strong>post</strong>请求当中<br>需要使用body-parser包</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理请求参数</span><span class="token comment" spellcheck="true">// 挂载参数处理中间件（post）</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理json格式的参数，不是必须的</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参考链接：<a href="https://www.jianshu.com/p/6290babbbc4a" target="_blank" rel="noopener">https://www.jianshu.com/p/6290babbbc4a</a></p><p>##jQuery语法速成<br>视频教程：<a href="https://www.bilibili.com/video/BV1Vx411R7ZW" target="_blank">jQuery基础</a></p><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="res-json"><a href="#res-json" class="headerlink" title="res.json()"></a>res.json()</h3><p>真实项目中，服务器端大多采用JSON对象作为响应数据的格式。<br>res.json([body])发送JSON响应。<br>该方法res.send()与将对象或数组作为参数相同。<br>即res.json()就是 res.send([body])方法中参数是Array 或 Object的情况， ‘content-type’: ‘application/json’。</p><p>参考链接：<a href="https://blog.csdn.net/m0_37263637/article/details/79753342" target="_blank" rel="noopener">https://blog.csdn.net/m0_37263637/article/details/79753342</a></p><h3 id="href-”javascript"><a href="#href-”javascript" class="headerlink" title="href=”javascript:;"></a>href=”javascript:;</h3><p>“href=”javascript:;”表示去掉a标签的默认行为。<br>“javascript:”是表示在触发&lt;a&gt;默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击&lt;a&gt;时就没有任何反应。一般在这种情况下，会给绑定一个事件回调，来执行业务。</p><h3 id="项目部分js代码解析"><a href="#项目部分js代码解析" class="headerlink" title="项目部分js代码解析"></a>项目部分js代码解析</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化数据列表</span>    <span class="token keyword">function</span> <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type <span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url <span class="token punctuation">:</span> <span class="token string">'/books'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 回调函数得到数据类型</span>            dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//  success(result,status,xhr)    当请求成功时运行的函数。</span>            <span class="token comment" spellcheck="true">// 第一个参数result是请求返回的结果，是一个json数组</span>            success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 渲染数据列表，得到html内容</span>                <span class="token comment" spellcheck="true">// data数组里面的每个值是一个对象，list是data的别名</span>                <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'indexTpl'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>list <span class="token punctuation">:</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// .html方法会识别html标签，.text方法会那内容直接当成字符串，并不会识别html标签。</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataList'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 必须在渲染完成内容之后才可以操作DOM标签</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dataList'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// :eq（index）  </span>                    <span class="token comment" spellcheck="true">// 获取到的td元素中，选择索引号为5的元素，索引号index从0开始。</span>                    <span class="token keyword">var</span> td <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'td:eq(5)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取编辑/删除按钮</span>                    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'td:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取id</span>                    <span class="token comment" spellcheck="true">// 绑定编辑图书的单击事件</span>                    td<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'a:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">editBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 绑定删除图书的单击事件</span>                    td<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'a:eq(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">deleteBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 绑定添加图书信息的单击事件</span>                    <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 重置表单</span>                    <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#addBookForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//iquery对象</span>                    form<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转为dom对象并调用原生方法</span>                    <span class="token comment" spellcheck="true">// type为hidden的元素无法用reset()重置</span>                    form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[type=hidden]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除图书信息</span>    <span class="token keyword">function</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type <span class="token punctuation">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>            url <span class="token punctuation">:</span> <span class="token string">'/books/book/'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>            dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除图书信息之后重新渲染数据列表</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 编辑图书信息</span>    <span class="token keyword">function</span> <span class="token function">editBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#addBookForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先根据数据id查询最新的数据</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type <span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url <span class="token punctuation">:</span> <span class="token string">'/books/book/'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>            dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化弹窗</span>                <span class="token keyword">var</span> mark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkBox</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'编辑图书'</span><span class="token punctuation">,</span>form<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mark<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 填充表单数据</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name=id]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//val()是赋值操作</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name=name]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name=author]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name=category]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[name=description]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 对表单提交按钮重新绑定单击事件</span>                form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[type=button]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 编辑完成数据之后重新提交表单</span>                    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        type <span class="token punctuation">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>                        url <span class="token punctuation">:</span> <span class="token string">'/books/book'</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// .serialize() 方法创建以标准 URL 编码表示的文本字符串。它的操作对象是代表表单元素集合的 jQuery 对象。</span>                        data <span class="token punctuation">:</span> form<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                        success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 隐藏弹窗</span>                                mark<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 重新渲染数据列表</span>                                <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加图书信息</span>    <span class="token keyword">function</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#addBookId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#addBookForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化弹窗对象</span>            <span class="token keyword">var</span> mark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkBox</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'添加图书'</span><span class="token punctuation">,</span>form<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mark<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input[type=button]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    type <span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>                    url <span class="token punctuation">:</span> <span class="token string">'/books/book'</span><span class="token punctuation">,</span>                    data <span class="token punctuation">:</span> form<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                    success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 关闭弹窗</span>                            mark<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 添加图书成功之后重新渲染数据列表</span>                            <span class="token function">initList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询天气</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#weather'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> cityCode <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'select option:selected'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type <span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url <span class="token punctuation">:</span> <span class="token string">'/weather/'</span> <span class="token operator">+</span> cityCode<span class="token punctuation">,</span>            dataType <span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>            success <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'weatherTpl'</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> mark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkBox</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'天气信息'</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mark<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记02</title>
      <link href="/2020/03/31/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B002/"/>
      <url>/2020/03/31/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B002/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔记02"><a href="#前端笔记02" class="headerlink" title="前端笔记02"></a>前端笔记02</h1><h2 id="part1-数据库所需软件安装"><a href="#part1-数据库所需软件安装" class="headerlink" title="part1 数据库所需软件安装"></a>part1 数据库所需软件安装</h2><h3 id="WampServer的下载方法"><a href="#WampServer的下载方法" class="headerlink" title="WampServer的下载方法"></a>WampServer的下载方法</h3><p><a href="https://www.cnblogs.com/Sabre/p/6728818.html" target="_blank">WampServer的下载方法</a> 亲测有效</p><h3 id="Navicat-premium-15-的下载和激活"><a href="#Navicat-premium-15-的下载和激活" class="headerlink" title="Navicat premium 15 的下载和激活"></a>Navicat premium 15 的下载和激活</h3><p><a href="https://www.cnblogs.com/asio/p/12208841.html" target="_blank">Navicat premium15 的下载和激活</a> 亲测有效</p><h2 id="part2-一些补充"><a href="#part2-一些补充" class="headerlink" title="part2 一些补充"></a>part2 一些补充</h2><p>学到这里开始产生疑问：<a href="https://www.bilibili.com/video/BV11x41197VK?p=62" target="_blank">Node.js-前端渲染-后台接口json、jsonp和restful</a></p><h3 id="前端渲染和后端渲染"><a href="#前端渲染和后端渲染" class="headerlink" title="前端渲染和后端渲染"></a>前端渲染和后端渲染</h3><h4 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h4><p><strong>所有页面都是在后台生成的。通过浏览器发送一个请求，得到的内容是一个完整的页面。</strong><br>服务器解析存放在服务器端的模板文件后，浏览器直接收到服务器呈现给用户的最终的HTML字符串。<br>浏览器只进行了HTML的解析，以及在显示器上把HTML所代表的图像显示给用户（通过操作系统提供的，用于使显示器显示内容的系统调用来实现）</p><h4 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h4><p><strong>基于后台接口，通过请求接口返回的数据，将数据渲染出来。后端只写接口，分工更明细。</strong><br>浏览器会从后端得到一些信息，这些信息或许是适用于题主所说的angularjs的模板文件，亦或是JSON等各种数据交换格式所包装的数据，甚至是直接的合法的HTML字符串。这些形式都不重要，重要的是，将这些信息组织排列形成最终可读的HTML字符串是由浏览器来完成的，在形成了HTML字符串之后，再进行显示</p><h4 id="二者比较"><a href="#二者比较" class="headerlink" title="二者比较"></a>二者比较</h4><ul><li>在性能上，后端渲染不如前端渲染，因为后端渲染将所有的HTML生成集中在了一个服务器上，而前端渲染将这部分工作分发到各个终端上。</li><li>对于开发而言，前端渲染能够避免后端开发人员过多的编写HTML代码，后端开发人员只需和前端开发事先商定好数据格式，后端只需将数据生成，用数据交换格式包装，再发送出去就可以了，这样能够使开发人员之间的分工更加明确。</li></ul><p><strong>参考链接：</strong><br><a href="https://blog.csdn.net/zfz5720/article/details/85095845" target="_blank" rel="noopener">https://blog.csdn.net/zfz5720/article/details/85095845</a><br><a href="https://www.jianshu.com/p/14c3c4f61d90" target="_blank" rel="noopener">https://www.jianshu.com/p/14c3c4f61d90</a></p><hr><h3 id="JSON、JSONP-JSON-with-Paddin-的区别"><a href="#JSON、JSONP-JSON-with-Paddin-的区别" class="headerlink" title="JSON、JSONP(JSON with Paddin)的区别"></a>JSON、JSONP(JSON with Paddin)的区别</h3><ul><li>JSON是一种数据交换格式，JSONP是 一种非官方跨域数据交互协议。</li><li>JSON是“暗号”，JSONP则是接头方式。</li><li>JSON是描述信息的格式，JSONP是信息传递双方约定的方法。</li><li>JSON返回的是一串数据，JSONP返回的是脚本代码(包含一个函数调用)</li></ul><h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><h4 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h4><ul><li><strong>浏览器的同源策略</strong>会导致跨域，这里同源策略又分为以下两种<ul><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。只要<strong>协议、域名、端口</strong>有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</li></ul></li></ul><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。<br>接口在一台服务器（或者端口）上，前端和页面服务在另一台服务器（或者端口）上，从前端获取接口数据出现跨域问题。</p><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><ol><li>修改响应头res.header（”Access-Control-Allow-Origin”,”*”）</li><li>JSONP<ul><li>JSONP原理：<ul><li>我们通过href或者src去请求下来的js脚本/css文件/img图片文件/视频文件都不存在跨域问题，只有通过Ajax请求请求下来的数据才存在跨域问题。</li><li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP</li><li>JSONP只支持get请求、不支持post请求(类似往页面添加一个script标签，通过src属性去触发对指定地址的请求,故只能是get请求)</li></ul></li><li>实现过程：<ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了。</li></ul></li></ul></li></ol><p><a href="https://www.bilibili.com/video/BV1Kt411E76z?from=search&amp;seid=7319513077122082066" target="_blank">CORS演示案例</a></p><p><strong>参考链接：</strong><br><a href="https://blog.csdn.net/tjcjava/article/details/76468225" target="_blank" rel="noopener">https://blog.csdn.net/tjcjava/article/details/76468225</a><br><a href="https://www.cnblogs.com/guyun/p/4588674.html" target="_blank" rel="noopener">https://www.cnblogs.com/guyun/p/4588674.html</a><br><a href="https://www.zhihu.com/question/26376773/answer/244453931" target="_blank" rel="noopener">https://www.zhihu.com/question/26376773/answer/244453931</a><br><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015597029</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记01</title>
      <link href="/2020/03/26/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B001/"/>
      <url>/2020/03/26/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h1 id="前端笔记01"><a href="#前端笔记01" class="headerlink" title="前端笔记01"></a>前端笔记01</h1><h2 id="Web基础文字教程"><a href="#Web基础文字教程" class="headerlink" title="Web基础文字教程"></a>Web基础文字教程</h2><p><a href="https://www.runoob.com/html/html-tutorial.html" target="_blank">HTML</a><br><a href="https://www.runoob.com/css/css-tutorial.html" target="_blank">CSS</a><br><a href="https://www.runoob.com/js/js-tutorial.html" target="_blank">JavaScript</a><br><a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank"> VUE</a>（只适合了解基本语法，可直接看视频教程）</p><h2 id="VUE视频教程"><a href="#VUE视频教程" class="headerlink" title="VUE视频教程"></a>VUE视频教程</h2><p><a href="https://www.bilibili.com/video/BV11s411A7h6?p=168" target="_blank">VUE视频教程</a><br>P38 18.vue-resource发起get、post、jsonp请求<br>P39 19.结合Node手写JSONP服务器剖析JSON<br>从这两p开始吃力，去补node.js和Ajax知识</p><p>👇👇👇</p><h2 id="node-js教程"><a href="#node-js教程" class="headerlink" title="node.js教程"></a>node.js教程</h2><p><a href="https://www.bilibili.com/video/BV11x41197VK?p=37" target="_blank">node.js主教程</a></p><h3 id="其中包括ES6部分内容"><a href="#其中包括ES6部分内容" class="headerlink" title="其中包括ES6部分内容"></a>其中包括<em>ES6</em>部分内容</h3><p>P9-1Node.js基础-ES6-字符串相关扩<br>P10-2Node.js基础-ES6-函数相关扩展<br>P11-3Node.js基础-ES6-箭头函数<br>P12-4.1Node.js基础-Buffer静态方法<br>P13-4Node.js基础-类与继承作</p><p>👇👇👇<br>该教程部分章节缺失，以下为补充内容：<br><a href="https://www.bilibili.com/video/BV1GE411L7is?p=43" target="_blank">get参数处理</a></p><p> <a href="https://www.bilibili.com/video/BV1GE411L7is/" target="_blank">node.js理论基础补充</a><br>P1-浏览器内核（渲染引擎）介绍<br>P2-浏览器渲染引擎工作原理<br>P3-页面reflow和layout过程<br>P4-浏览器访问服务器过程 <strong>【面试题】</strong><br>P5-http请求报文和响应报文格式介绍<br>P6-web开发本质<br>P7-node.js是什么<br>P8-node.js特点<br>P11-node.js开发网站和传统PHP等开发网站的区别<br>P12-REPL介绍<br>P15-node.js中单线程-非阻塞IO解释</p><p><a href="https://www.bilibili.com/video/BV16E41137ZU?p=14" target="_blank">ip地址和端口号的概念</a></p><h2 id="Ajax基础"><a href="#Ajax基础" class="headerlink" title="Ajax基础"></a>Ajax基础</h2><p> <a href="https://www.bilibili.com/video/BV11E411e7yF/" target="_blank">Ajax基础</a>（ 讲的非常详细和基础，建议2倍速观看）</p><p>P01.Ajax编程基础_<br>P02.Ajax的运行环境_<br>P03.Ajax运行原理_<br>P04.Ajax的实现步骤_<br>P05.服务器响应的数据格式_<br>P06.请求参数传递_<br>P07.POST请求方式_<br>P08.请求参数的格式_<br>P09.获取服务器端的响应_<br>P10.Ajax错误处理_<br>P11.低版本IE浏览器的缓存问题_<br>P12.同步异步概述_<br>P13.Ajax封装_<br>P14.Ajax函数封装01_<br>P15.Ajax函数封装02_<br>P16.Ajax函数封装03_<br>P17.Ajax函数封装04_<br>P18.Ajax函数封装05_<br><a href="https://www.bilibili.com/video/BV11E411e7yF?p=19" target="_blank">P19 01.模板引擎概述</a> （还没看，留到node学完后）</p><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="node服务端口被占用"><a href="#node服务端口被占用" class="headerlink" title="node服务端口被占用"></a>node服务端口被占用</h3><p><a href="https://www.jianshu.com/p/0ec26fcb2733" target="_blank">node服务端口被占用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FOR A BETTER LIFE</title>
      <link href="/2020/03/18/FOR-A-BETTER-LIFE/"/>
      <url>/2020/03/18/FOR-A-BETTER-LIFE/</url>
      
        <content type="html"><![CDATA[<h1 id="FOR-A-BETTER-LIFE-01"><a href="#FOR-A-BETTER-LIFE-01" class="headerlink" title="FOR A BETTER LIFE 01"></a>FOR A BETTER LIFE 01</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=3597649&amp;auto=1&amp;height=66"></iframe><br>不定时记录一下学习的过程。<h2 id="已经学到的（runoob）"><a href="#已经学到的（runoob）" class="headerlink" title="已经学到的（runoob）"></a>已经学到的（runoob）</h2><ul><li>HTML+CSS</li><li>JavaScript</li><li>VUE.js一些简单语法</li></ul><h2 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h2><ul><li>知识点只是了解了但是记不住，需要不断去翻</li><li>没有清晰的思路，脑袋混乱</li><li>VUE的学习光看文字教程不行，需要听课</li><li>只能做简单网页，离项目还很远</li></ul><h2 id="下一步学习计划"><a href="#下一步学习计划" class="headerlink" title="下一步学习计划"></a>下一步学习计划</h2><h5 id="尽快学完VUE"><a href="#尽快学完VUE" class="headerlink" title="尽快学完VUE"></a>尽快学完VUE</h5><ul><li><a href="https://www.bilibili.com/video/av27969216?p=2" target="_blank">看这个教程</a></li><li>一周内学完（27小时40分钟）</li><li>养成做笔记习惯</li><li>能做个简单的项目</li></ul><h5 id="学REACT"><a href="#学REACT" class="headerlink" title="学REACT"></a>学REACT</h5><h5 id="学webpack"><a href="#学webpack" class="headerlink" title="学webpack"></a>学webpack</h5><h5 id="搞清楚这个博客究竟是怎么实现的"><a href="#搞清楚这个博客究竟是怎么实现的" class="headerlink" title="搞清楚这个博客究竟是怎么实现的"></a>搞清楚这个博客究竟是怎么实现的</h5><h2 id="其他需要坚持的事"><a href="#其他需要坚持的事" class="headerlink" title="其他需要坚持的事"></a>其他需要坚持的事</h2><ul><li>每天背单词至少100个（坚持42天了）</li><li>天鹅臂+周六野斜方肌+站立腹肌 （约35分钟）</li></ul><h2 id="一些有的没的"><a href="#一些有的没的" class="headerlink" title="一些有的没的"></a>一些有的没的</h2><ul><li>最近气温超过20度，可是没有春天的衣服穿（呜）</li><li>老板发的论文没时间看，头疼</li><li>体重根本不掉，分明中午吃沙拉了啊，我不服</li><li>哥哥周末过生日要回来，准备开启疫情后第一次堂食（吃冒菜去）</li><li>最近皮肤有点不稳定，搞不懂了</li><li>JENKAI和KAISTAL，KSWL真的KSWL</li><li>金金的GUCCI续约啦，开心！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MOONPIE制作教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MOONPIE制作教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JENKAI</title>
      <link href="/2020/03/10/JENKAI/"/>
      <url>/2020/03/10/JENKAI/</url>
      
        <content type="html"><![CDATA[<h1 id="JENKAI-IS-REAL"><a href="#JENKAI-IS-REAL" class="headerlink" title="JENKAI IS REAL"></a>JENKAI IS REAL</h1><p>四月开妮都有大刊封面，ELLE×嘉人，开妮就是时尚圈顶流cp，开妮就是最屌的！<br><br>海外的饭制P图👇<br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI1.JPG" alt="GUCCI×CHANEL"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI2.JPG" alt="这张好真"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI3.JPG" alt="小情侣自拍咯"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI4.JPG" alt="kswl"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI5.JPG" alt="sweet date"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI6.JPG" alt="氛围绝了"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI7.JPG" alt="美国青少年的恋爱"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI8.JPG" alt="从小夫妻相"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI9.JPG" alt="去逛展啦"><br><br><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/JENKAI10.JPG" alt="夏威夷的夜"><br></p><p>献上我觉得最最最配的拉郎巨制👇<br></p><iframe src="//player.bilibili.com/player.html?aid=18286489&amp;cid=29859241&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800px" height="600px"> </iframe><br><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>To be a skimmed moon pie</title>
      <link href="/2020/03/10/To-be-a-skimmed-moon-pie/"/>
      <url>/2020/03/10/To-be-a-skimmed-moon-pie/</url>
      
        <content type="html"><![CDATA[<h1 id="To-be-a-skimmed-moon-pie"><a href="#To-be-a-skimmed-moon-pie" class="headerlink" title="To be a skimmed moon pie"></a>To be a skimmed moon pie</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=4873543&amp;auto=1&amp;height=66"></iframe><h2 id="MOON-PIE决定脱脂"><a href="#MOON-PIE决定脱脂" class="headerlink" title="MOON PIE决定脱脂"></a>MOON PIE决定脱脂</h2><p>先来一个澳洲小玫瑰作为脱脂动力呜呜。（不知道能不能播）</p><p class="video1"><iframe src="//player.bilibili.com/player.html?aid=50173038&amp;cid=87828062&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p>比去年这时候胖了**8斤**，我怎么这么能吃！**今年的目标是减到93，维持在97！**<h3 id="脱脂时期饮食原则"><a href="#脱脂时期饮食原则" class="headerlink" title="脱脂时期饮食原则"></a>脱脂时期饮食原则</h3><ul><li>每顿饭，吃脂肪蛋白时少碳水，吃碳水时少脂肪蛋白</li><li>尽量不吃精制碳水</li><li>进食时间≤ 8小时</li><li>细嚼慢咽</li><li>每顿饭，先吃蔬菜，再吃肉，最后吃碳水</li><li>每天起床/饭前一小时，吃苹果醋</li><li>不吃零食不喝饮料</li></ul><h3 id="和去年比想避开的"><a href="#和去年比想避开的" class="headerlink" title="和去年比想避开的"></a>和去年比想避开的</h3><ul><li>不再每天计算卡路里</li><li>吃饱，防止暴食</li><li>加入适度运动</li><li>放平心态</li></ul><h2 id="MOON-PIE要去打工"><a href="#MOON-PIE要去打工" class="headerlink" title="MOON PIE要去打工"></a>MOON PIE要去打工</h2><p>好烦啊，学习的进度有点慢，刚学完HTML,CSS和JS都还没碰，现在决定改变战略。</p><ul><li>快速过完CSS和JS，不再所有内容都实践</li><li>看面筋，刷题</li></ul><h2 id="MOON-PIE不想科研"><a href="#MOON-PIE不想科研" class="headerlink" title="MOON PIE不想科研"></a>MOON PIE不想科研</h2><p>正在拖延+逃避</p><ul><li>看老板发的四篇论文</li><li>等投稿消息</li></ul><h2 id="MOON-PIE的开心事"><a href="#MOON-PIE的开心事" class="headerlink" title="MOON PIE的开心事"></a>MOON PIE的开心事</h2><ul><li>有在一直坚持背单词，超过一个月啦</li><li>尝试新的妆容风格，奶凶猫眼妆（努力做仿珍人）</li><li>昨天帮妈妈化妆啦，得到了爸妈夸奖嘿嘿嘿</li></ul><h2 id="MOON-PIE的心愿盒"><a href="#MOON-PIE的心愿盒" class="headerlink" title="MOON PIE的心愿盒"></a>MOON PIE的心愿盒</h2><ul><li>四月前减到100斤以下</li><li>天灵灵地灵灵，投稿请中吧呜呜呜！</li><li>找到还不错的实习</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MARCH GUCCI BOY</title>
      <link href="/2020/03/04/MARCH-GUCCI-BOY/"/>
      <url>/2020/03/04/MARCH-GUCCI-BOY/</url>
      
        <content type="html"><![CDATA[<h1 id="MARCH-GUCCI-BOY"><a href="#MARCH-GUCCI-BOY" class="headerlink" title="MARCH GUCCI BOY"></a>MARCH GUCCI BOY</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=478920065&amp;auto=1&amp;height=66"></iframe><p>今天一睁眼就有好消息~<strong>GUCCI BOY</strong>的春夏广告大片来啦！</p><p><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/GUCCIBOY.JPG" alt="人间GUCCI" title="人间GUCCI"></p><p>这次的广告真的好有质感噢，美式复古，嬉皮又风骚，我超爱！一整天的心情都被点亮了耶！<br>难驾驭的蕾丝手套和蕾丝袜也被他穿的好合理，真的是人间GUCCI！</p><h2 id="今天的开心事件"><a href="#今天的开心事件" class="headerlink" title="今天的开心事件"></a>今天的开心事件</h2><ul><li>昨天搞了个GitHub+PicGo的<strong>图床</strong>，但是感觉不太稳定，有时候会突然被墙，图直接裂开哈哈哈。</li><li>现在还在恶补HTML中，争取今天吧HTML给看完，明天迈入CSS！</li><li>今天在iherb上海淘的东西到啦！补充剂吃起来，做健康女孩！</li><li>学会插入音乐了哈哈哈~</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THE FIRST MOON PIE</title>
      <link href="/2020/03/03/article-title/"/>
      <url>/2020/03/03/article-title/</url>
      
        <content type="html"><![CDATA[<h2 id="THE-FIRST-MOON-PIE"><a href="#THE-FIRST-MOON-PIE" class="headerlink" title="THE FIRST MOON PIE"></a>THE FIRST MOON PIE</h2><p>感觉高中毕业以后再也没写过这种闲谈的日志，有点害羞哩。</p><p><strong>三月</strong>到啦，这可能是除了夏天外，一年里我最喜欢的月份。<br>春天来了，气温上升，可以穿的<strong>轻飘飘</strong>~<br>我和无甜味的<strong>生日</strong>也要来了！接下来还会有很多好朋友过生日！<br>随着春暖花开，人好像也有了<strong>振作起来</strong>的动力，虽然年年如此，但是还是会感到幸福。</p><p>开这个博客的初衷，是为了<del>有地方能记录我的碎碎念</del>学会前端找个实习。<br>不知不觉就到研二下学期啦，因为疫情的缘故开学还不知道要到什么时候。<br>人还在家里享受安逸，现实却摆在眼前啦。<br><strong>好怕找不到工作啊！</strong><br>不管怎样，哪怕每天进步一点点，为了未来而努力吧！</p><hr><h3 id="制定一下本月并不会完成的计划吧！"><a href="#制定一下本月并不会完成的计划吧！" class="headerlink" title="制定一下本月并不会完成的计划吧！"></a><strong>制定一下本月<del>并不会完成的</del>计划吧！</strong></h3><ul><li>学一遍HTML+CSS+JS的基本教程</li><li>每天背至少一百个单词（已经坚持了28天啦）</li><li>减肥5斤</li><li>每晚做天鹅臂+周六野斜方肌</li><li>看完三篇论文（明天就看）</li></ul><hr><p><img src="https://raw.githubusercontent.com/Kaaaaaaious/FigBed/master/img/bear2.jpg" alt="三月开冲！" title="我就试试看能不能贴图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/06/hello-world/"/>
      <url>/2020/02/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
